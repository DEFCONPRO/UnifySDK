/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}
#include "sl_log.h"
#include "sl_status.h"
#include "attribute_store.h"
#include "zpc_attribute_store_network_helper.h"
#include "attribute_store_helper.h"
#include "zwave_unid.h"
#include "zwave_controller_types.h"
#include "dotdot_attributes.h"

#define LOG_TAG "zcl_attribute"

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster {{label}}
////////////////////////////////////////////////////////////////////////////////
{{#zcl_attributes}}
bool {{asAttributeIsSupportedFunction parent.label label}}(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      {{asAttributeIdDefine parent.label label}});
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

{{asUnderlyingType type}} {{asAttributeGetFunction parent.label label}}(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  {{asUnderlyingType type}} result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      {{asAttributeIdDefine parent.label label}});
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t {{asAttributeSetFunction parent.label label}}(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  {{asUnderlyingType type}} new_{{asSnakeCaseLower label}})
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      {{asAttributeIdDefine parent.label label}});
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_{{asSnakeCaseLower label}},
                                                  sizeof({{asUnderlyingType type}}));
}

{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}

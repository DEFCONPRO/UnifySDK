/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @defgroup dotdot_attributes DotDot attributes mapper
 * @ingroup dotdot_mapper
 * @brief Maps DotDot attributes to Attribute Store
 *
 * This module contains functions to map from DotDot attributes to the
 * Attribute Store \ref attribute_store
 *
 * @{
 */
{{zap_header}}
#ifndef DOTDOT_ATTRIBUTES_H
#define DOTDOT_ATTRIBUTES_H

#include <stdint.h>
#include <stdbool.h>

#include "sl_status.h"
#include "zap-types.h"
#include "zwave_controller_types.h"
#include "attribute_store.h"
#include "zwave_unid.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
////////////////////////////////////////////////////////////////////////////////
// Start of cluster {{label}}
////////////////////////////////////////////////////////////////////////////////

// Attribute Defines for {{label}}
{{#zcl_attributes}}
#define {{asAttributeIdDefine parent.label label}} ((attribute_store_type_t) 0x{{attributeID this}})
///< This represents the {{label}} attribute in the DotDot {{parent.label}} cluster

{{/zcl_attributes}}
{{#zcl_attributes}}
// {{parent.label}} {{label}}
/**
 * @brief Verifies if the DotDot {{parent.label}} {{label}} is supported
 *
 * @returns true if {{label}} is supported
 * @returns false if {{label}} is not supported
 */
bool {{asAttributeIsSupportedFunction parent.label label}} (
              const unid_t unid, const zwave_endpoint_id_t endpoint);

/**
 * @brief Gets the DotDot {{label}} attribute
 *
 * @param unid UNID to get value for
 * @param endpoint Endpoint to get value for
 * @param value_state value state to get,
 *                    see \ref attribute_store_get_node_attribute_value
 * @returns {{label}} attribute
 */
int32_t {{asAttributeGetFunction parent.label label}}(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state);

/**
 * @brief Set the DotDot {{label}} attribute
 *
 * @param unid UNID to set value on
 * @param endpoint endpoint to set value on
 * @param value_state value state to write for the node,
 *                    see \ref attribute_store_set_node_attribute_value
 * @param new_{{asSnakeCaseLower label}} new value to set
 * @returns sl_status_t SL_STATUS_OK on success
 */
sl_status_t {{asAttributeSetFunction parent.label label}}(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int32_t new_{{asSnakeCaseLower label}});

{{/zcl_attributes}}
{{/if}}
{{/zcl_clusters}}
#ifdef __cplusplus
}
#endif // __cplusplus
#endif // DOTDOT_ATTRIBUTES_H
/** @} end dotdot_attributes */

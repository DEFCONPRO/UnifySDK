/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.
#include "sl_log.h"
#include "sl_status.h"
#include "attribute_store.h"
#include "zpc_attribute_store_network_helper.h"
#include "attribute_store_helper.h"
#include "zwave_unid.h"
#include "zwave_controller_types.h"
#include "dotdot_attributes.h"

#define LOG_TAG "zcl_attribute"

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Basic
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_basic_zcl_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_zcl_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_zcl_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zcl_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ZCL_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zcl_version,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_application_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_application_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_application_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_application_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_APPLICATION_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_version,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_stack_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_stack_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_STACK_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_stack_version,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_hw_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_hw_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_hw_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hw_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_HW_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hw_version,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_manufacturer_name(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_manufacturer_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_manufacturer_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_name)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_NAME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_manufacturer_name,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_model_identifier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_model_identifier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_model_identifier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_model_identifier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MODEL_IDENTIFIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_model_identifier,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_date_code(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_date_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_date_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_date_code)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DATE_CODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_date_code,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_power_source(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_power_source(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_power_source(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_source)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_POWER_SOURCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_source,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_generic_device_class(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_generic_device_class(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_generic_device_class(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_class)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_CLASS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_generic_device_class,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_generic_device_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_generic_device_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_generic_device_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_generic_device_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_GENERIC_DEVICE_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_generic_device_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_product_code(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_product_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_product_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_product_code)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_CODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_product_code,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_producturl(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_producturl(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_producturl(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_producturl)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCTURL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_producturl,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_manufacturer_version_details(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_manufacturer_version_details(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_manufacturer_version_details(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_manufacturer_version_details)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_MANUFACTURER_VERSION_DETAILS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_manufacturer_version_details,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_serial_number(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_serial_number(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_serial_number(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_serial_number)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SERIAL_NUMBER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_serial_number,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_product_label(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_product_label(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_product_label(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_product_label)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PRODUCT_LABEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_product_label,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_location_description(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_location_description(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_location_description(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_location_description)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_LOCATION_DESCRIPTION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_location_description,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_basic_physical_environment(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_physical_environment(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_physical_environment(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_environment)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_PHYSICAL_ENVIRONMENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_environment,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_device_enabled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_basic_device_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_device_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_device_enabled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DEVICE_ENABLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_device_enabled,
                                                  sizeof(bool));
}

bool dotdot_is_supported_basic_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_disable_local_config(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_basic_disable_local_config(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_disable_local_config(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_disable_local_config)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_DISABLE_LOCAL_CONFIG);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_disable_local_config,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_basic_sw_buildid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_basic_sw_buildid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_basic_sw_buildid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_sw_buildid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BASIC_SW_BUILDID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_sw_buildid,
                                                  sizeof(const char*));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PowerConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_power_configuration_mains_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_mains_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_mains_frequency(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_mains_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_frequency)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_FREQUENCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_frequency,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_mains_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_mains_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mains_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_mains_voltage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_mains_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_min_threshold,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_mains_voltage_max_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_mains_voltage_max_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_max_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_max_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_MAX_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_max_threshold,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_mains_voltage_dwell_trip_point(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_mains_voltage_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_mains_voltage_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mains_voltage_dwell_trip_point)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_MAINS_VOLTAGE_DWELL_TRIP_POINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mains_voltage_dwell_trip_point,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_battery_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_percentage_remaining(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_remaining)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_REMAINING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_remaining,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_manufacturer(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_power_configuration_battery_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_battery_manufacturer)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_MANUFACTURER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_manufacturer,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_power_configuration_battery_size(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

BatterySize dotdot_get_power_configuration_battery_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  BatterySize result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery_size)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_SIZE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_size,
                                                  sizeof(BatterySize));
}

bool dotdot_is_supported_power_configuration_batterya_hr_rating(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_batterya_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_batterya_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_batterya_hr_rating)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERYA_HR_RATING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_batterya_hr_rating,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_battery_quantity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_quantity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_QUANTITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_quantity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_rated_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_rated_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_RATED_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_rated_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_voltage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_voltage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_voltage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_voltage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_voltage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_VOLTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_voltage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_percentage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_percentage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_percentage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_percentage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery_percentage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_PERCENTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery_alarm_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_power_configuration_battery_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery_alarm_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY_ALARM_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_alarm_state,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_power_configuration_battery2_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_percentage_remaining(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_remaining)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_REMAINING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_remaining,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_manufacturer(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_power_configuration_battery2_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_battery2_manufacturer)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_MANUFACTURER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_manufacturer,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_power_configuration_battery2_size(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

BatterySize dotdot_get_power_configuration_battery2_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  BatterySize result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery2_size)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_SIZE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_size,
                                                  sizeof(BatterySize));
}

bool dotdot_is_supported_power_configuration_battery2a_hr_rating(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_battery2a_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2a_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery2a_hr_rating)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2A_HR_RATING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2a_hr_rating,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_battery2_quantity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_quantity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_QUANTITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_quantity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_rated_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_rated_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_RATED_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_rated_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_voltage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_voltage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_voltage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_voltage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_voltage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_VOLTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_voltage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_percentage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_percentage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_percentage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_percentage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery2_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery2_percentage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_PERCENTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_percentage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery2_alarm_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_power_configuration_battery2_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery2_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery2_alarm_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY2_ALARM_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery2_alarm_state,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_power_configuration_battery3_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_percentage_remaining(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_remaining(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_remaining)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_REMAINING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_remaining,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_manufacturer(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_power_configuration_battery3_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_battery3_manufacturer)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_MANUFACTURER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_manufacturer,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_power_configuration_battery3_size(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

BatterySize dotdot_get_power_configuration_battery3_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  BatterySize result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  BatterySize new_battery3_size)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_SIZE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_size,
                                                  sizeof(BatterySize));
}

bool dotdot_is_supported_power_configuration_battery3a_hr_rating(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_power_configuration_battery3a_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3a_hr_rating(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_battery3a_hr_rating)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3A_HR_RATING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3a_hr_rating,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_power_configuration_battery3_quantity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_quantity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_QUANTITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_quantity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_rated_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_rated_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_rated_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_RATED_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_rated_voltage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_voltage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_voltage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_voltage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_voltage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_voltage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_voltage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_VOLTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_voltage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_percentage_min_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_min_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_min_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_MIN_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_min_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_percentage_threshold1(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold1(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold1)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD1);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold1,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_percentage_threshold2(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold2(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold2)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD2);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold2,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_percentage_threshold3(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_power_configuration_battery3_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_percentage_threshold3(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_battery3_percentage_threshold3)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_PERCENTAGE_THRESHOLD3);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_percentage_threshold3,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_power_configuration_battery3_alarm_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_power_configuration_battery3_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_power_configuration_battery3_alarm_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_battery3_alarm_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POWER_CONFIGURATION_BATTERY3_ALARM_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery3_alarm_state,
                                                  sizeof(uint32_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DeviceTemperatureConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_device_temperature_configuration_current_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_device_temperature_configuration_current_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_current_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_current_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_CURRENT_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_temperature,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_device_temperature_configuration_min_temp_experienced(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_device_temperature_configuration_min_temp_experienced(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_min_temp_experienced(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_temp_experienced)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MIN_TEMP_EXPERIENCED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_temp_experienced,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_device_temperature_configuration_max_temp_experienced(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_device_temperature_configuration_max_temp_experienced(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_max_temp_experienced(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_temp_experienced)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_MAX_TEMP_EXPERIENCED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_temp_experienced,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_device_temperature_configuration_over_temp_total_dwell(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_device_temperature_configuration_over_temp_total_dwell(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_over_temp_total_dwell(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_over_temp_total_dwell)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_OVER_TEMP_TOTAL_DWELL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_over_temp_total_dwell,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_device_temperature_configuration_device_temp_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_device_temperature_configuration_device_temp_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_device_temp_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_device_temp_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_DEVICE_TEMP_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_device_temp_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_device_temperature_configuration_low_temp_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_device_temperature_configuration_low_temp_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_low_temp_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_low_temp_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_low_temp_threshold,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_device_temperature_configuration_high_temp_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_device_temperature_configuration_high_temp_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_high_temp_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_high_temp_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_high_temp_threshold,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_device_temperature_configuration_low_temp_dwell_trip_point(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_device_temperature_configuration_low_temp_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_low_temp_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_low_temp_dwell_trip_point)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_LOW_TEMP_DWELL_TRIP_POINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_low_temp_dwell_trip_point,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_device_temperature_configuration_high_temp_dwell_trip_point(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_device_temperature_configuration_high_temp_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_device_temperature_configuration_high_temp_dwell_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_high_temp_dwell_trip_point)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEVICE_TEMPERATURE_CONFIGURATION_HIGH_TEMP_DWELL_TRIP_POINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_high_temp_dwell_trip_point,
                                                  sizeof(uint32_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Identify
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_identify_identify_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_identify_identify_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_identify_identify_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_identify_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IDENTIFY_IDENTIFY_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_identify_time,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Groups
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_groups_name_support(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_groups_name_support(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_groups_name_support(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_GROUPS_NAME_SUPPORT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_name_support,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Scenes
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_scenes_scene_count(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_scenes_scene_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_scene_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_scene_count)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_COUNT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scene_count,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_scenes_current_scene(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_scenes_current_scene(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_current_scene(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_scene)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_SCENE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_scene,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_scenes_current_group(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

SGroupId dotdot_get_scenes_current_group(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  SGroupId result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_current_group(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  SGroupId new_current_group)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_CURRENT_GROUP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_group,
                                                  sizeof(SGroupId));
}

bool dotdot_is_supported_scenes_scene_valid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_scenes_scene_valid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_scene_valid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_scene_valid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_VALID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scene_valid,
                                                  sizeof(bool));
}

bool dotdot_is_supported_scenes_name_support(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_scenes_name_support(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_name_support(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_name_support)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_NAME_SUPPORT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_name_support,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_scenes_last_configured_by(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

EUI64 dotdot_get_scenes_last_configured_by(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  EUI64 result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_scenes_last_configured_by(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  EUI64 new_last_configured_by)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SCENES_LAST_CONFIGURED_BY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_configured_by,
                                                  sizeof(EUI64));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster OnOff
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_on_off_on_off(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_on_off_on_off(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_on_off(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_on_off)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_OFF);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_off,
                                                  sizeof(bool));
}

bool dotdot_is_supported_on_off_global_scene_control(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_on_off_global_scene_control(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_global_scene_control(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_global_scene_control)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_GLOBAL_SCENE_CONTROL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_global_scene_control,
                                                  sizeof(bool));
}

bool dotdot_is_supported_on_off_on_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_on_off_on_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_on_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_ON_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_on_off_off_wait_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_on_off_off_wait_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_off_wait_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_wait_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_OFF_WAIT_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_off_wait_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_on_off_start_up_on_off(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_on_off_start_up_on_off(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_on_off_start_up_on_off(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_on_off)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ON_OFF_START_UP_ON_OFF);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_on_off,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Level
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_level_current_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_current_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_current_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_level_remaining_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_remaining_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_remaining_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_REMAINING_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remaining_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_min_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_level_max_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_level_current_frequency(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_current_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_current_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_frequency)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_CURRENT_FREQUENCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_frequency,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_min_frequency(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_min_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_min_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_frequency)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MIN_FREQUENCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_frequency,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_max_frequency(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_max_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_max_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_frequency)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_MAX_FREQUENCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_frequency,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_options(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_options(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_options(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OPTIONS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_options,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_level_on_off_transition_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_on_off_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_off_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_off_transition_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_OFF_TRANSITION_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_off_transition_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_on_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_on_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_on_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_level_on_transition_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_on_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_on_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_on_transition_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_ON_TRANSITION_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_on_transition_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_off_transition_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_off_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_off_transition_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_off_transition_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_OFF_TRANSITION_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_off_transition_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_default_move_rate(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_level_default_move_rate(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_default_move_rate(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_move_rate)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_DEFAULT_MOVE_RATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_move_rate,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_level_start_up_current_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_level_start_up_current_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_level_start_up_current_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_up_current_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_LEVEL_START_UP_CURRENT_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_current_level,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Alarms
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_alarms_alarm_count(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_alarms_alarm_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_alarms_alarm_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_count)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ALARMS_ALARM_COUNT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_count,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Time
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_time_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_time_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_time_time_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_time_time_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_time_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_time_time_zone(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int32_t dotdot_get_time_time_zone(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_time_zone(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int32_t new_time_zone)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_TIME_ZONE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_time_zone,
                                                  sizeof(int32_t));
}

bool dotdot_is_supported_time_dst_start(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_time_dst_start(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_start(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_start)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_START);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_start,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_time_dst_end(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_time_dst_end(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_end(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_dst_end)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_END);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_end,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_time_dst_shift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int32_t dotdot_get_time_dst_shift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_dst_shift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int32_t new_dst_shift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_DST_SHIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dst_shift,
                                                  sizeof(int32_t));
}

bool dotdot_is_supported_time_standard_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_time_standard_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_standard_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_standard_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_STANDARD_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_standard_time,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_time_local_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_time_local_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_local_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_local_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LOCAL_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_time,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_time_last_set_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_time_last_set_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_last_set_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_last_set_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_LAST_SET_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_set_time,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_time_valid_until_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_time_valid_until_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_time_valid_until_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_valid_until_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TIME_VALID_UNTIL_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_valid_until_time,
                                                  sizeof(UTC));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster OTAUpgrade
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ota_upgrade_upgrade_serverid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_SERVERID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

EUI64 dotdot_get_ota_upgrade_upgrade_serverid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  EUI64 result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_SERVERID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_upgrade_serverid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  EUI64 new_upgrade_serverid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_SERVERID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_upgrade_serverid,
                                                  sizeof(EUI64));
}

bool dotdot_is_supported_ota_upgrade_file_offset(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_FILE_OFFSET);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ota_upgrade_file_offset(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_FILE_OFFSET);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_file_offset(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_file_offset)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_FILE_OFFSET);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_file_offset,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ota_upgrade_current_file_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_FILE_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ota_upgrade_current_file_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_FILE_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_current_file_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_current_file_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_FILE_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_file_version,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ota_upgrade_current_zig_bee_stack_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_ZIG_BEE_STACK_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ota_upgrade_current_zig_bee_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_ZIG_BEE_STACK_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_current_zig_bee_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_zig_bee_stack_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_CURRENT_ZIG_BEE_STACK_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_zig_bee_stack_version,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ota_upgrade_downloaded_file_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_FILE_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ota_upgrade_downloaded_file_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_FILE_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_downloaded_file_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_downloaded_file_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_FILE_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_downloaded_file_version,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ota_upgrade_downloaded_zig_bee_stack_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_ZIG_BEE_STACK_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ota_upgrade_downloaded_zig_bee_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_ZIG_BEE_STACK_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_downloaded_zig_bee_stack_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_downloaded_zig_bee_stack_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_DOWNLOADED_ZIG_BEE_STACK_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_downloaded_zig_bee_stack_version,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ota_upgrade_image_upgrade_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_UPGRADE_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ota_upgrade_image_upgrade_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_UPGRADE_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_image_upgrade_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_image_upgrade_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_UPGRADE_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_image_upgrade_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ota_upgrade_manufacturerid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MANUFACTURERID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ota_upgrade_manufacturerid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MANUFACTURERID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_manufacturerid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_manufacturerid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MANUFACTURERID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_manufacturerid,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ota_upgrade_image_typeid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_TYPEID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ota_upgrade_image_typeid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_TYPEID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_image_typeid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_image_typeid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_TYPEID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_image_typeid,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ota_upgrade_minimum_block_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MINIMUM_BLOCK_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ota_upgrade_minimum_block_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MINIMUM_BLOCK_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_minimum_block_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_minimum_block_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_MINIMUM_BLOCK_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_minimum_block_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ota_upgrade_image_stamp(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_STAMP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ota_upgrade_image_stamp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_STAMP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_image_stamp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_image_stamp)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_IMAGE_STAMP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_image_stamp,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ota_upgrade_upgrade_activation_policy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ota_upgrade_upgrade_activation_policy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_upgrade_activation_policy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_upgrade_activation_policy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_ACTIVATION_POLICY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_upgrade_activation_policy,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ota_upgrade_upgrade_timeout_policy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ota_upgrade_upgrade_timeout_policy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ota_upgrade_upgrade_timeout_policy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_upgrade_timeout_policy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OTA_UPGRADE_UPGRADE_TIMEOUT_POLICY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_upgrade_timeout_policy,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PollControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_poll_control_check_in_interval(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_poll_control_check_in_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_check_in_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_check_in_interval,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_poll_control_long_poll_interval(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_poll_control_long_poll_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_long_poll_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_long_poll_interval,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_poll_control_short_poll_interval(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_poll_control_short_poll_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_short_poll_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_short_poll_interval)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_SHORT_POLL_INTERVAL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_short_poll_interval,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_poll_control_fast_poll_timeout(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_poll_control_fast_poll_timeout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_fast_poll_timeout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fast_poll_timeout,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_poll_control_check_in_interval_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_poll_control_check_in_interval_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_check_in_interval_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_check_in_interval_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_CHECK_IN_INTERVAL_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_check_in_interval_min,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_poll_control_long_poll_interval_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_poll_control_long_poll_interval_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_long_poll_interval_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_long_poll_interval_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_LONG_POLL_INTERVAL_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_long_poll_interval_min,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_poll_control_fast_poll_timeout_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_poll_control_fast_poll_timeout_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_poll_control_fast_poll_timeout_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_fast_poll_timeout_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_POLL_CONTROL_FAST_POLL_TIMEOUT_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fast_poll_timeout_max,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ShadeConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_shade_configuration_physical_closed_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_shade_configuration_physical_closed_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_physical_closed_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_PHYSICAL_CLOSED_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_shade_configuration_motor_step_size(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_shade_configuration_motor_step_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_motor_step_size(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_motor_step_size)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MOTOR_STEP_SIZE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_motor_step_size,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_shade_configuration_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_shade_configuration_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_shade_configuration_closed_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_shade_configuration_closed_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_closed_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_closed_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_CLOSED_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_closed_limit,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_shade_configuration_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_shade_configuration_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_shade_configuration_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SHADE_CONFIGURATION_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mode,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DoorLock
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_door_lock_lock_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_lock_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_lock_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lock_state,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_lock_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_lock_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_lock_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lock_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LOCK_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lock_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_actuator_enabled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_actuator_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_actuator_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_actuator_enabled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ACTUATOR_ENABLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_actuator_enabled,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_door_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_door_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_door_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_state,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_door_open_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_door_lock_door_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_open_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_OPEN_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_open_events,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_door_lock_door_closed_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_door_lock_door_closed_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_door_closed_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_door_closed_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DOOR_CLOSED_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_door_closed_events,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_door_lock_open_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_open_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_open_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPEN_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_number_of_log_records_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_number_of_log_records_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_log_records_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_log_records_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_LOG_RECORDS_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_log_records_supported,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_number_of_total_users_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_number_of_total_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_total_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_total_users_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_TOTAL_USERS_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_total_users_supported,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_number_ofpin_users_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFPIN_USERS_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_number_ofpin_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFPIN_USERS_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_ofpin_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_ofpin_users_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFPIN_USERS_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_ofpin_users_supported,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_number_ofrfid_users_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFRFID_USERS_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_number_ofrfid_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFRFID_USERS_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_ofrfid_users_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_ofrfid_users_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OFRFID_USERS_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_ofrfid_users_supported,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_number_of_week_day_schedules_supported_per_user(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_number_of_week_day_schedules_supported_per_user(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_week_day_schedules_supported_per_user(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_week_day_schedules_supported_per_user)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_WEEK_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_week_day_schedules_supported_per_user,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_number_of_year_day_schedules_supported_per_user(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_number_of_year_day_schedules_supported_per_user(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_year_day_schedules_supported_per_user(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_year_day_schedules_supported_per_user)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_YEAR_DAY_SCHEDULES_SUPPORTED_PER_USER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_year_day_schedules_supported_per_user,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_number_of_holiday_schedules_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_number_of_holiday_schedules_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_number_of_holiday_schedules_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_holiday_schedules_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_NUMBER_OF_HOLIDAY_SCHEDULES_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_holiday_schedules_supported,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_maxpin_code_length(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXPIN_CODE_LENGTH);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_maxpin_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXPIN_CODE_LENGTH);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_maxpin_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_maxpin_code_length)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXPIN_CODE_LENGTH);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_maxpin_code_length,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_minpin_code_length(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINPIN_CODE_LENGTH);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_minpin_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINPIN_CODE_LENGTH);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_minpin_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_minpin_code_length)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINPIN_CODE_LENGTH);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_minpin_code_length,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_maxrfid_code_length(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXRFID_CODE_LENGTH);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_maxrfid_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXRFID_CODE_LENGTH);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_maxrfid_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_maxrfid_code_length)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MAXRFID_CODE_LENGTH);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_maxrfid_code_length,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_minrfid_code_length(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINRFID_CODE_LENGTH);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_minrfid_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINRFID_CODE_LENGTH);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_minrfid_code_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_minrfid_code_length)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MINRFID_CODE_LENGTH);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_minrfid_code_length,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_enable_logging(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_enable_logging(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_logging(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_enable_logging)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOGGING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_logging,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_language(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_door_lock_language(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_language(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_language)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LANGUAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_language,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_door_lock_led_settings(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_led_settings(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_led_settings(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_led_settings)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_LED_SETTINGS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_led_settings,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_auto_relock_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_door_lock_auto_relock_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_auto_relock_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_auto_relock_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_AUTO_RELOCK_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_auto_relock_time,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_door_lock_sound_volume(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_sound_volume(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_sound_volume(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_sound_volume)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SOUND_VOLUME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_sound_volume,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_operating_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

DrlkOperMode dotdot_get_door_lock_operating_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  DrlkOperMode result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_operating_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  DrlkOperMode new_operating_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_OPERATING_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_operating_mode,
                                                  sizeof(DrlkOperMode));
}

bool dotdot_is_supported_door_lock_supported_operating_modes(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_supported_operating_modes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_supported_operating_modes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_supported_operating_modes)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SUPPORTED_OPERATING_MODES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supported_operating_modes,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_default_configuration_register(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_default_configuration_register(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_default_configuration_register(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_default_configuration_register)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_DEFAULT_CONFIGURATION_REGISTER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_configuration_register,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_enable_local_programming(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_enable_local_programming(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_local_programming(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_enable_local_programming)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_LOCAL_PROGRAMMING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_local_programming,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_enable_one_touch_locking(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_enable_one_touch_locking(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_one_touch_locking(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_enable_one_touch_locking)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_ONE_TOUCH_LOCKING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_one_touch_locking,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_enable_inside_statusled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_enable_inside_statusled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_inside_statusled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_enable_inside_statusled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_INSIDE_STATUSLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_inside_statusled,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_enable_privacy_mode_button(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_enable_privacy_mode_button(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_enable_privacy_mode_button(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_enable_privacy_mode_button)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ENABLE_PRIVACY_MODE_BUTTON);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enable_privacy_mode_button,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_wrong_code_entry_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_wrong_code_entry_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_wrong_code_entry_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_wrong_code_entry_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_WRONG_CODE_ENTRY_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_wrong_code_entry_limit,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_user_code_temporary_disable_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_user_code_temporary_disable_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_user_code_temporary_disable_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_user_code_temporary_disable_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_USER_CODE_TEMPORARY_DISABLE_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_user_code_temporary_disable_time,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_sendpin_over_the_air(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SENDPIN_OVER_THE_AIR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_sendpin_over_the_air(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SENDPIN_OVER_THE_AIR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_sendpin_over_the_air(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_sendpin_over_the_air)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SENDPIN_OVER_THE_AIR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_sendpin_over_the_air,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_requirepi_nforrf_operation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIREPI_NFORRF_OPERATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_door_lock_requirepi_nforrf_operation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIREPI_NFORRF_OPERATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_requirepi_nforrf_operation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_requirepi_nforrf_operation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_REQUIREPI_NFORRF_OPERATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_requirepi_nforrf_operation,
                                                  sizeof(bool));
}

bool dotdot_is_supported_door_lock_security_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_door_lock_security_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_security_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_security_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_SECURITY_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_security_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_door_lock_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_keypad_operation_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_keypad_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_keypad_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_operation_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_OPERATION_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_operation_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_rf_operation_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_rf_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rf_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_operation_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_OPERATION_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rf_operation_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_manual_operation_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_manual_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_manual_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_manual_operation_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_MANUAL_OPERATION_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_manual_operation_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_rfid_operation_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_rfid_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rfid_operation_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_operation_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_OPERATION_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rfid_operation_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_keypad_programming_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_keypad_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_keypad_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_keypad_programming_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_KEYPAD_PROGRAMMING_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_programming_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_rf_programming_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_rf_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rf_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rf_programming_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RF_PROGRAMMING_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rf_programming_event_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_door_lock_rfid_programming_event_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_door_lock_rfid_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_door_lock_rfid_programming_event_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rfid_programming_event_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DOOR_LOCK_RFID_PROGRAMMING_EVENT_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rfid_programming_event_mask,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindowCovering
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_window_covering_window_covering_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_window_covering_window_covering_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_window_covering_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_window_covering_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_WINDOW_COVERING_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_window_covering_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_window_covering_physical_closed_limit_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_physical_closed_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_physical_closed_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_physical_closed_limit_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_physical_closed_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_physical_closed_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_closed_limit_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_PHYSICAL_CLOSED_LIMIT_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_closed_limit_tilt,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_current_position_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_current_position_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_current_position_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_current_position_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_current_position_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_tilt,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_number_of_actuations_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_number_of_actuations_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_number_of_actuations_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_actuations_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_number_of_actuations_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_number_of_actuations_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_number_of_actuations_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_actuations_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_NUMBER_OF_ACTUATIONS_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_actuations_tilt,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_config_or_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_window_covering_config_or_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_config_or_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_config_or_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CONFIG_OR_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_config_or_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_window_covering_current_position_lift_percentage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_window_covering_current_position_lift_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_lift_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_lift_percentage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_LIFT_PERCENTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_lift_percentage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_window_covering_current_position_tilt_percentage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_window_covering_current_position_tilt_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_current_position_tilt_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_position_tilt_percentage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_CURRENT_POSITION_TILT_PERCENTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_position_tilt_percentage,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_window_covering_installed_open_limit_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_installed_open_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_open_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_open_limit_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_installed_closed_limit_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_installed_closed_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_closed_limit_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_closed_limit_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_installed_open_limit_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_installed_open_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_open_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_open_limit_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_OPEN_LIMIT_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_open_limit_tilt,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_installed_closed_limit_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_installed_closed_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_installed_closed_limit_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_installed_closed_limit_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INSTALLED_CLOSED_LIMIT_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_installed_closed_limit_tilt,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_velocity_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_velocity_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_velocity_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_velocity_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_VELOCITY_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_velocity_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_acceleration_time_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_acceleration_time_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_acceleration_time_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_acceleration_time_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_ACCELERATION_TIME_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_acceleration_time_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_deceleration_time_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_window_covering_deceleration_time_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_deceleration_time_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_deceleration_time_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_DECELERATION_TIME_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_deceleration_time_lift,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_window_covering_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_window_covering_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_window_covering_intermediate_setpoints_lift(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_window_covering_intermediate_setpoints_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_intermediate_setpoints_lift(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_lift)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_LIFT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_intermediate_setpoints_lift,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_window_covering_intermediate_setpoints_tilt(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_window_covering_intermediate_setpoints_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_window_covering_intermediate_setpoints_tilt(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_intermediate_setpoints_tilt)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WINDOW_COVERING_INTERMEDIATE_SETPOINTS_TILT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_intermediate_setpoints_tilt,
                                                  sizeof(const char*));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster BarrierControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_barrier_control_moving_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_barrier_control_moving_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_moving_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_moving_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_MOVING_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_moving_state,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_barrier_control_safety_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_safety_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_safety_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_safety_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_SAFETY_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_safety_status,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_capabilities(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_barrier_control_capabilities(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_capabilities(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_capabilities)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CAPABILITIES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_capabilities,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_barrier_control_open_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_events,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_close_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_close_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_close_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_close_events,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_command_open_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_command_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_command_open_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_open_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_OPEN_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_command_open_events,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_command_close_events(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_command_close_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_command_close_events(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_command_close_events)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_COMMAND_CLOSE_EVENTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_command_close_events,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_open_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_open_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_open_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_open_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_OPEN_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_open_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_close_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_barrier_control_close_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_close_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_close_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_CLOSE_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_close_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_barrier_control_barrier_position(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_barrier_control_barrier_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_barrier_control_barrier_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_barrier_position)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BARRIER_CONTROL_BARRIER_POSITION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_barrier_position,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PumpConfigurationAndControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_pump_configuration_and_control_max_pressure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_max_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_pressure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_PRESSURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_pressure,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_speed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_max_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_speed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_SPEED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_speed,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_flow(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_max_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_flow)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_FLOW);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_flow,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_min_const_pressure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_min_const_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_pressure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_PRESSURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_pressure,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_const_pressure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_max_const_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_pressure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_PRESSURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_pressure,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_min_comp_pressure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_min_comp_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_comp_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_comp_pressure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_COMP_PRESSURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_comp_pressure,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_comp_pressure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_max_comp_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_comp_pressure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_comp_pressure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_COMP_PRESSURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_comp_pressure,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_min_const_speed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_min_const_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_speed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_SPEED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_speed,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_const_speed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_max_const_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_speed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_SPEED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_speed,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_min_const_flow(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_min_const_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_const_flow)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_FLOW);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_flow,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_const_flow(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_max_const_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_flow(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_const_flow)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_FLOW);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_flow,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_min_const_temp(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_min_const_temp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_min_const_temp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_const_temp)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MIN_CONST_TEMP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_const_temp,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_max_const_temp(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_max_const_temp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_max_const_temp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_const_temp)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_MAX_CONST_TEMP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_const_temp,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_pump_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_pump_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_pump_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pump_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_PUMP_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pump_status,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_effective_operation_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

PumpOperationMode dotdot_get_pump_configuration_and_control_effective_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  PumpOperationMode result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_effective_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_effective_operation_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_OPERATION_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_effective_operation_mode,
                                                  sizeof(PumpOperationMode));
}

bool dotdot_is_supported_pump_configuration_and_control_effective_control_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

PumpControlMode dotdot_get_pump_configuration_and_control_effective_control_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  PumpControlMode result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_effective_control_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_effective_control_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_EFFECTIVE_CONTROL_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_effective_control_mode,
                                                  sizeof(PumpControlMode));
}

bool dotdot_is_supported_pump_configuration_and_control_capacity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pump_configuration_and_control_capacity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_capacity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_capacity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CAPACITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_capacity,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_speed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_speed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_speed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_SPEED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_speed,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pump_configuration_and_control_lifetime_running_hours(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_pump_configuration_and_control_lifetime_running_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_lifetime_running_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_running_hours)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_RUNNING_HOURS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lifetime_running_hours,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_pump_configuration_and_control_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_pump_configuration_and_control_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_pump_configuration_and_control_lifetime_energy_consumed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_pump_configuration_and_control_lifetime_energy_consumed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_lifetime_energy_consumed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lifetime_energy_consumed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_LIFETIME_ENERGY_CONSUMED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lifetime_energy_consumed,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_pump_configuration_and_control_operation_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

PumpOperationMode dotdot_get_pump_configuration_and_control_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  PumpOperationMode result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  PumpOperationMode new_operation_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_OPERATION_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_operation_mode,
                                                  sizeof(PumpOperationMode));
}

bool dotdot_is_supported_pump_configuration_and_control_control_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

PumpControlMode dotdot_get_pump_configuration_and_control_control_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  PumpControlMode result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_control_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  PumpControlMode new_control_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_CONTROL_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_control_mode,
                                                  sizeof(PumpControlMode));
}

bool dotdot_is_supported_pump_configuration_and_control_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pump_configuration_and_control_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pump_configuration_and_control_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PUMP_CONFIGURATION_AND_CONTROL_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Thermostat
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_thermostat_local_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_local_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_local_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_local_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_temperature,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_outdoor_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_outdoor_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_outdoor_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_outdoor_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OUTDOOR_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_outdoor_temperature,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_occupancy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_occupancy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupancy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPANCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_abs_min_heat_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_abs_min_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_min_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_heat_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_min_heat_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_abs_max_heat_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_abs_max_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_max_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_heat_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_max_heat_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_abs_min_cool_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_abs_min_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_min_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_min_cool_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_min_cool_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_abs_max_cool_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_abs_max_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_abs_max_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_abs_max_cool_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_abs_max_cool_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_pi_cooling_demand(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_pi_cooling_demand(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_pi_cooling_demand(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_cooling_demand)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_COOLING_DEMAND);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pi_cooling_demand,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_pi_heating_demand(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_pi_heating_demand(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_pi_heating_demand(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pi_heating_demand)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_PI_HEATING_DEMAND);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pi_heating_demand,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_hvac_system_type_configuration(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_hvac_system_type_configuration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_hvac_system_type_configuration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_hvac_system_type_configuration)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_HVAC_SYSTEM_TYPE_CONFIGURATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hvac_system_type_configuration,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_local_temperature_calibration(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_thermostat_local_temperature_calibration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_local_temperature_calibration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_local_temperature_calibration)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_LOCAL_TEMPERATURE_CALIBRATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_local_temperature_calibration,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_thermostat_occupied_cooling_setpoint(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_occupied_cooling_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_cooling_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_cooling_setpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_COOLING_SETPOINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_cooling_setpoint,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_occupied_heating_setpoint(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_occupied_heating_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_heating_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_occupied_heating_setpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_HEATING_SETPOINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_heating_setpoint,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_unoccupied_cooling_setpoint(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_unoccupied_cooling_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_cooling_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_cooling_setpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_cooling_setpoint,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_unoccupied_heating_setpoint(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_unoccupied_heating_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_heating_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_unoccupied_heating_setpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_heating_setpoint,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_min_heat_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_min_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_heat_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_heat_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_max_heat_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_max_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_max_heat_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_heat_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_heat_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_min_cool_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_min_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_cool_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_cool_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_max_cool_setpoint_limit(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_max_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_max_cool_setpoint_limit(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_cool_setpoint_limit)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_cool_setpoint_limit,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_min_setpoint_dead_band(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_thermostat_min_setpoint_dead_band(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_min_setpoint_dead_band(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_min_setpoint_dead_band)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_MIN_SETPOINT_DEAD_BAND);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_setpoint_dead_band,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_thermostat_remote_sensing(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_remote_sensing(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_remote_sensing(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_remote_sensing)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_REMOTE_SENSING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remote_sensing,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_control_sequence_of_operation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_control_sequence_of_operation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_control_sequence_of_operation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_control_sequence_of_operation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_CONTROL_SEQUENCE_OF_OPERATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_control_sequence_of_operation,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_system_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_system_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_system_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_system_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SYSTEM_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_system_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_alarm_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_alarm_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_alarm_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_ALARM_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_alarm_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_thermostat_running_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_thermostat_running_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_running_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_running_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_running_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_start_of_week(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_start_of_week(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_start_of_week(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_start_of_week)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_START_OF_WEEK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_of_week,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_number_of_weekly_transitions(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_number_of_weekly_transitions(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_number_of_weekly_transitions(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_weekly_transitions)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_WEEKLY_TRANSITIONS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_weekly_transitions,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_number_of_daily_transitions(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_number_of_daily_transitions(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_number_of_daily_transitions(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_daily_transitions)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_NUMBER_OF_DAILY_TRANSITIONS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_daily_transitions,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_temperature_setpoint_hold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_temperature_setpoint_hold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_temperature_setpoint_hold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_setpoint_hold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_setpoint_hold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_temperature_setpoint_hold_duration(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_thermostat_temperature_setpoint_hold_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_temperature_setpoint_hold_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_temperature_setpoint_hold_duration)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_TEMPERATURE_SETPOINT_HOLD_DURATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_setpoint_hold_duration,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_thermostat_thermostat_programming_operation_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_thermostat_programming_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_programming_operation_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_thermostat_programming_operation_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_PROGRAMMING_OPERATION_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_programming_operation_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_thermostat_running_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_thermostat_thermostat_running_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_thermostat_running_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_thermostat_running_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_THERMOSTAT_RUNNING_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_thermostat_running_state,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_thermostat_setpoint_change_source(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_setpoint_change_source(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_source(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_setpoint_change_source)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_source,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_setpoint_change_amount(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_setpoint_change_amount(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_amount(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_setpoint_change_amount)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_AMOUNT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_amount,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_setpoint_change_source_timestamp(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_thermostat_setpoint_change_source_timestamp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_setpoint_change_source_timestamp(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_setpoint_change_source_timestamp)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_SETPOINT_CHANGE_SOURCE_TIMESTAMP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_setpoint_change_source_timestamp,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_thermostat_occupied_setback(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_occupied_setback(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_occupied_setback_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_occupied_setback_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback_min,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_occupied_setback_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_occupied_setback_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_occupied_setback_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupied_setback_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_OCCUPIED_SETBACK_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupied_setback_max,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_unoccupied_setback(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_unoccupied_setback(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_unoccupied_setback_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_unoccupied_setback_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback_min,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_unoccupied_setback_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_unoccupied_setback_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_unoccupied_setback_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unoccupied_setback_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_UNOCCUPIED_SETBACK_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unoccupied_setback_max,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_emergency_heat_delta(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_emergency_heat_delta(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_emergency_heat_delta(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_emergency_heat_delta)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_EMERGENCY_HEAT_DELTA);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_emergency_heat_delta,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_ac_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_ac_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_ac_capacity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_thermostat_ac_capacity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_capacity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_capacity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_capacity,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_thermostat_ac_refrigerant_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_ac_refrigerant_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_refrigerant_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_refrigerant_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_REFRIGERANT_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_refrigerant_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_ac_compressor_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_ac_compressor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_compressor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_compressor_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COMPRESSOR_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_compressor_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_ac_error_code(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_thermostat_ac_error_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_error_code(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_ac_error_code)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_ERROR_CODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_error_code,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_thermostat_ac_louver_position(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_ac_louver_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_louver_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_louver_position)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_LOUVER_POSITION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_louver_position,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_ac_coil_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_thermostat_ac_coil_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_coil_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_coil_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_COIL_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_coil_temperature,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_thermostat_ac_capacity_format(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_ac_capacity_format(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_ac_capacity_format(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ac_capacity_format)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_AC_CAPACITY_FORMAT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_capacity_format,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster FanControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_fan_control_fan_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_fan_control_fan_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_fan_control_fan_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fan_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_fan_control_fan_mode_sequence(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_fan_control_fan_mode_sequence(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_fan_control_fan_mode_sequence(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_fan_mode_sequence)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FAN_CONTROL_FAN_MODE_SEQUENCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fan_mode_sequence,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster DehumidificationControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_dehumidification_control_relative_humidity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_dehumidification_cooling(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_cooling(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_cooling(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_cooling)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_COOLING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_cooling,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_rh_dehumidification_setpoint(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_rh_dehumidification_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_rh_dehumidification_setpoint(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_rh_dehumidification_setpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RH_DEHUMIDIFICATION_SETPOINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rh_dehumidification_setpoint,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_relative_humidity_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_dehumidification_lockout(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_lockout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_lockout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_lockout)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_LOCKOUT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_lockout,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_dehumidification_hysteresis(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_hysteresis(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_hysteresis(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_hysteresis)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_HYSTERESIS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_hysteresis,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_dehumidification_max_cool(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_dehumidification_max_cool(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_dehumidification_max_cool(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dehumidification_max_cool)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_DEHUMIDIFICATION_MAX_COOL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dehumidification_max_cool,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_dehumidification_control_relative_humidity_display(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_dehumidification_control_relative_humidity_display(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_dehumidification_control_relative_humidity_display(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_relative_humidity_display)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DEHUMIDIFICATION_CONTROL_RELATIVE_HUMIDITY_DISPLAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relative_humidity_display,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ThermostatUserInterfaceConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_thermostat_user_interface_configuration_temperature_display_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_temperature_display_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_temperature_display_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_display_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_TEMPERATURE_DISPLAY_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_display_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_user_interface_configuration_keypad_lockout(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_keypad_lockout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_keypad_lockout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_keypad_lockout)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_KEYPAD_LOCKOUT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_keypad_lockout,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_thermostat_user_interface_configuration_schedule_programming_visibility(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_thermostat_user_interface_configuration_schedule_programming_visibility(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_thermostat_user_interface_configuration_schedule_programming_visibility(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_schedule_programming_visibility)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_THERMOSTAT_USER_INTERFACE_CONFIGURATION_SCHEDULE_PROGRAMMING_VISIBILITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_schedule_programming_visibility,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ColorControl
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_color_control_current_hue(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_current_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_current_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_hue)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_HUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_hue,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_current_saturation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_current_saturation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_current_saturation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_saturation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENT_SATURATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_saturation,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_remaining_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_remaining_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_remaining_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_remaining_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_REMAINING_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_remaining_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_currentx(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_currentx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_currentx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currentx)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_currentx,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_currenty(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_currenty(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_currenty(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_currenty)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_CURRENTY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_currenty,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_drift_compensation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_drift_compensation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_drift_compensation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_drift_compensation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_DRIFT_COMPENSATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_drift_compensation,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_compensation_text(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_color_control_compensation_text(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_compensation_text(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_compensation_text)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COMPENSATION_TEXT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_compensation_text,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_color_control_color_temperature_mireds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_temperature_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temperature_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temperature_mireds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temperature_mireds,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_color_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_options(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_options(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_options(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_options)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_OPTIONS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_options,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_number_of_primaries(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_number_of_primaries(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_number_of_primaries(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_primaries)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_NUMBER_OF_PRIMARIES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_primaries,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary1x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary1x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary1y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary1y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary1y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary1_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary1_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary1_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary1_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY1_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary1_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary2x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary2x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary2y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary2y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary2y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary2_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary2_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary2_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary2_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY2_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary2_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary3x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary3x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary3y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary3y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary3y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary3_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary3_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary3_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary3_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY3_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary3_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary4x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary4x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary4y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary4y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary4y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary4_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary4_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary4_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary4_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY4_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary4_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary5x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary5x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary5y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary5y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary5y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary5_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary5_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary5_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary5_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY5_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary5_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_primary6x(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary6x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6x(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6x)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6X);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6x,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary6y(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_primary6y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6y(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_primary6y)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6Y);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6y,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_primary6_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_primary6_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_primary6_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_primary6_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_PRIMARY6_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_primary6_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_white_pointx(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_white_pointx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_white_pointx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointx)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_white_pointx,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_white_pointy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_white_pointy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_white_pointy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_white_pointy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_WHITE_POINTY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_white_pointy,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointrx(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointrx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointrx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointrx)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointrx,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointry(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointry)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTRY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointry,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointr_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_color_pointr_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointr_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointr_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTR_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointr_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_color_pointgx(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointgx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointgx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgx)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointgx,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointgy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointgy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointgy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointgy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTGY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointgy,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointg_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_color_pointg_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointg_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointg_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTG_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointg_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_color_pointbx(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointbx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointbx(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointbx)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointbx,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointby(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_pointby(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointby(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_pointby)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTBY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointby,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_pointb_intensity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_color_pointb_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_pointb_intensity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_pointb_intensity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_POINTB_INTENSITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_pointb_intensity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_enhanced_current_hue(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_enhanced_current_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_enhanced_current_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_enhanced_current_hue)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_CURRENT_HUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enhanced_current_hue,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_enhanced_color_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_enhanced_color_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_enhanced_color_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_enhanced_color_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_ENHANCED_COLOR_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_enhanced_color_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_color_loop_active(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_color_control_color_loop_active(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_active(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_color_loop_active)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_ACTIVE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_active,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_color_control_color_loop_direction(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

CCColorLoopDirection dotdot_get_color_control_color_loop_direction(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  CCColorLoopDirection result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_direction(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  CCColorLoopDirection new_color_loop_direction)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_DIRECTION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_direction,
                                                  sizeof(CCColorLoopDirection));
}

bool dotdot_is_supported_color_control_color_loop_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_loop_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_loop_start_enhanced_hue(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_loop_start_enhanced_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_start_enhanced_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_start_enhanced_hue)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_START_ENHANCED_HUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_start_enhanced_hue,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_loop_stored_enhanced_hue(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_loop_stored_enhanced_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_loop_stored_enhanced_hue(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_loop_stored_enhanced_hue)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_LOOP_STORED_ENHANCED_HUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_loop_stored_enhanced_hue,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_capabilities(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_capabilities(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_capabilities(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_capabilities)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_CAPABILITIES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_capabilities,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_temp_physical_min_mireds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_temp_physical_min_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temp_physical_min_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_min_mireds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_MIREDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temp_physical_min_mireds,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_color_temp_physical_max_mireds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_color_temp_physical_max_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_color_temp_physical_max_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_color_temp_physical_max_mireds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_MIREDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_color_temp_physical_max_mireds,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_couple_color_temp_to_level_min_mireds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_couple_color_temp_to_level_min_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_couple_color_temp_to_level_min_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_couple_color_temp_to_level_min_mireds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_COUPLE_COLOR_TEMP_TO_LEVEL_MIN_MIREDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_couple_color_temp_to_level_min_mireds,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_color_control_start_up_color_temperature_mireds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_color_control_start_up_color_temperature_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_color_control_start_up_color_temperature_mireds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_start_up_color_temperature_mireds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_COLOR_CONTROL_START_UP_COLOR_TEMPERATURE_MIREDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_start_up_color_temperature_mireds,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster BallastConfiguration
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ballast_configuration_physical_min_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_physical_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_physical_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_min_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MIN_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_min_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_physical_max_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_physical_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_physical_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_max_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_PHYSICAL_MAX_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_max_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_ballast_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_ballast_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_ballast_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ballast_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_min_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_min_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_min_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MIN_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_max_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_max_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_max_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_MAX_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_power_on_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_power_on_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_power_on_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_power_on_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_on_level,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_power_on_fade_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ballast_configuration_power_on_fade_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_power_on_fade_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_power_on_fade_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_POWER_ON_FADE_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_on_fade_time,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ballast_configuration_intrinsic_ballast_factor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_intrinsic_ballast_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_intrinsic_ballast_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_intrinsic_ballast_factor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_INTRINSIC_BALLAST_FACTOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_intrinsic_ballast_factor,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_ballast_factor_adjustment(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_ballast_factor_adjustment(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_ballast_factor_adjustment(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ballast_factor_adjustment)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_BALLAST_FACTOR_ADJUSTMENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ballast_factor_adjustment,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_lamp_quantity(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_lamp_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_quantity(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_quantity)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_QUANTITY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_quantity,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_lamp_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_ballast_configuration_lamp_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_type,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_ballast_configuration_lamp_manufacturer(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_ballast_configuration_lamp_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_manufacturer(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_lamp_manufacturer)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_MANUFACTURER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_manufacturer,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_ballast_configuration_lamp_rated_hours(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ballast_configuration_lamp_rated_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_rated_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_rated_hours)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_RATED_HOURS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_rated_hours,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ballast_configuration_lamp_burn_hours(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ballast_configuration_lamp_burn_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_burn_hours,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_ballast_configuration_lamp_alarm_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ballast_configuration_lamp_alarm_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_alarm_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_lamp_alarm_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_ALARM_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_alarm_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ballast_configuration_lamp_burn_hours_trip_point(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_ballast_configuration_lamp_burn_hours_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ballast_configuration_lamp_burn_hours_trip_point(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_lamp_burn_hours_trip_point)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BALLAST_CONFIGURATION_LAMP_BURN_HOURS_TRIP_POINT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_lamp_burn_hours_trip_point,
                                                  sizeof(uint32_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_illuminance_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_illuminance_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_illuminance_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_illuminance_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_illuminance_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_illuminance_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_illuminance_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_illuminance_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_illuminance_measurement_light_sensor_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_illuminance_measurement_light_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_measurement_light_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_MEASUREMENT_LIGHT_SENSOR_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_light_sensor_type,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IlluminanceLevelSensing
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_illuminance_level_sensing_level_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_illuminance_level_sensing_level_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_level_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_level_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LEVEL_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_level_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_illuminance_level_sensing_light_sensor_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_illuminance_level_sensing_light_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_light_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_light_sensor_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_LIGHT_SENSOR_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_light_sensor_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_illuminance_level_sensing_illuminance_target_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_illuminance_level_sensing_illuminance_target_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_illuminance_level_sensing_illuminance_target_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_illuminance_target_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ILLUMINANCE_LEVEL_SENSING_ILLUMINANCE_TARGET_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_illuminance_target_level,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster TemperatureMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_temperature_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_temperature_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_temperature_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_temperature_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_temperature_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_temperature_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_temperature_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_temperature_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_temperature_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_TEMPERATURE_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PressureMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_pressure_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pressure_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pressure_measurement_scaled_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_scaled_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scaled_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_min_scaled_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_min_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_min_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_min_scaled_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MIN_SCALED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_scaled_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_max_scaled_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_pressure_measurement_max_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_max_scaled_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_max_scaled_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_MAX_SCALED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_scaled_value,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_pressure_measurement_scaled_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_pressure_measurement_scaled_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scaled_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_scaled_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALED_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scaled_tolerance,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_pressure_measurement_scale(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_pressure_measurement_scale(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_pressure_measurement_scale(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_scale)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PRESSURE_MEASUREMENT_SCALE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_scale,
                                                  sizeof(int8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster FlowMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_flow_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_flow_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_flow_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_flow_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_flow_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_flow_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_flow_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_flow_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_flow_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_FLOW_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster RelativityHumidity
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_relativity_humidity_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_relativity_humidity_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_relativity_humidity_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_relativity_humidity_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_relativity_humidity_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_relativity_humidity_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_relativity_humidity_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_relativity_humidity_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_relativity_humidity_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_RELATIVITY_HUMIDITY_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster OccupancySensing
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_occupancy_sensing_occupancy(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_occupancy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy_sensor_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_occupancy_sensing_occupancy_sensor_type_bitmap(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_occupancy_sensor_type_bitmap(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_occupancy_sensor_type_bitmap(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_occupancy_sensor_type_bitmap)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_OCCUPANCY_SENSOR_TYPE_BITMAP);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_occupancy_sensor_type_bitmap,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_occupied_to_unoccupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_pir_unoccupied_to_occupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_pir_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_pir_unoccupied_to_occupied_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PIR_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pir_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_occupied_to_unoccupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ultrasonic_unoccupied_to_occupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_ultrasonic_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_ultrasonic_unoccupied_to_occupied_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_ULTRASONIC_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ultrasonic_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_occupied_to_unoccupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_occupied_to_unoccupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_OCCUPIED_TO_UNOCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_occupied_to_unoccupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_physical_contact_unoccupied_to_occupied_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_unoccupied_to_occupied_delay,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_occupancy_sensing_physical_contact_unoccupied_to_occupied_threshold(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_physical_contact_unoccupied_to_occupied_threshold)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_OCCUPANCY_SENSING_PHYSICAL_CONTACT_UNOCCUPIED_TO_OCCUPIED_THRESHOLD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_physical_contact_unoccupied_to_occupied_threshold,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster PhMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ph_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ph_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ph_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ph_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ph_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ph_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ph_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ph_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ph_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PH_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalConductivityMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_electrical_conductivity_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_conductivity_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_conductivity_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_conductivity_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_conductivity_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_conductivity_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_conductivity_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_conductivity_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_conductivity_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_CONDUCTIVITY_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster WindSpeedMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_wind_speed_measurement_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_wind_speed_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_wind_speed_measurement_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_wind_speed_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_wind_speed_measurement_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_wind_speed_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_wind_speed_measurement_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_wind_speed_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_wind_speed_measurement_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_WIND_SPEED_MEASUREMENT_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster CarbonMonoxide
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_carbon_monoxide_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

float dotdot_get_carbon_monoxide_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  float result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  float new_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_value,
                                                  sizeof(float));
}

bool dotdot_is_supported_carbon_monoxide_min_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

float dotdot_get_carbon_monoxide_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  float result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_min_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  float new_min_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MIN_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_measured_value,
                                                  sizeof(float));
}

bool dotdot_is_supported_carbon_monoxide_max_measured_value(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

float dotdot_get_carbon_monoxide_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  float result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_max_measured_value(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  float new_max_measured_value)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_MAX_MEASURED_VALUE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_measured_value,
                                                  sizeof(float));
}

bool dotdot_is_supported_carbon_monoxide_tolerance(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

float dotdot_get_carbon_monoxide_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  float result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_carbon_monoxide_tolerance(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  float new_tolerance)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CARBON_MONOXIDE_TOLERANCE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tolerance,
                                                  sizeof(float));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASZone
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_ias_zone_zone_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ias_zone_zone_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zone_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_state,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ias_zone_zone_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

IasZoneType dotdot_get_ias_zone_zone_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  IasZoneType result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  IasZoneType new_zone_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_type,
                                                  sizeof(IasZoneType));
}

bool dotdot_is_supported_ias_zone_zone_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_ias_zone_zone_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zone_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_zone_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONE_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zone_status,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_ias_zone_iascie_address(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

EUI64 dotdot_get_ias_zone_iascie_address(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  EUI64 result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_iascie_address(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  EUI64 new_iascie_address)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_IASCIE_ADDRESS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_iascie_address,
                                                  sizeof(EUI64));
}

bool dotdot_is_supported_ias_zone_zoneid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ias_zone_zoneid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_zoneid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_zoneid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_ZONEID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_zoneid,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ias_zone_number_of_zone_sensitivity_levels_supported(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ias_zone_number_of_zone_sensitivity_levels_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_number_of_zone_sensitivity_levels_supported(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_number_of_zone_sensitivity_levels_supported)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_NUMBER_OF_ZONE_SENSITIVITY_LEVELS_SUPPORTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_zone_sensitivity_levels_supported,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_ias_zone_current_zone_sensitivity_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_ias_zone_current_zone_sensitivity_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_ias_zone_current_zone_sensitivity_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_current_zone_sensitivity_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IAS_ZONE_CURRENT_ZONE_SENSITIVITY_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_zone_sensitivity_level,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster IASWD
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_iaswd_max_duration(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_iaswd_max_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_iaswd_max_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_max_duration)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_IASWD_MAX_DURATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_duration,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Metering
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_metering_current_summation_delivered(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_metering_current_summation_delivered(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_summation_delivered(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_delivered)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_DELIVERED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_summation_delivered,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_metering_current_summation_received(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_metering_current_summation_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_summation_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_summation_received)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_SUMMATION_RECEIVED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_summation_received,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_metering_current_max_demand_delivered(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_metering_current_max_demand_delivered(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_delivered(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_max_demand_delivered)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_delivered,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_metering_current_max_demand_received(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_metering_current_max_demand_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_current_max_demand_received)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_received,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_metering_power_factor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_metering_power_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_power_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_POWER_FACTOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_metering_reading_snap_shot_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_metering_reading_snap_shot_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_reading_snap_shot_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_reading_snap_shot_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_READING_SNAP_SHOT_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reading_snap_shot_time,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_metering_current_max_demand_delivered_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_metering_current_max_demand_delivered_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_delivered_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_delivered_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_DELIVERED_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_delivered_time,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_metering_current_max_demand_received_time(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

UTC dotdot_get_metering_current_max_demand_received_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  UTC result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_max_demand_received_time(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  UTC new_current_max_demand_received_time)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_MAX_DEMAND_RECEIVED_TIME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_max_demand_received_time,
                                                  sizeof(UTC));
}

bool dotdot_is_supported_metering_default_update_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_default_update_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_default_update_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_default_update_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEFAULT_UPDATE_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_default_update_period,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_supply_status(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_supply_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_supply_status(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_supply_status)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUPPLY_STATUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_supply_status,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_current_inlet_energy_carrier_summation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_metering_current_inlet_energy_carrier_summation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_inlet_energy_carrier_summation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_inlet_energy_carrier_summation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_INLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_inlet_energy_carrier_summation,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_metering_current_outlet_energy_carrier_summation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_metering_current_outlet_energy_carrier_summation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_current_outlet_energy_carrier_summation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_current_outlet_energy_carrier_summation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_CURRENT_OUTLET_ENERGY_CARRIER_SUMMATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_outlet_energy_carrier_summation,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_metering_inlet_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_metering_inlet_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_inlet_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_inlet_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_INLET_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_inlet_temperature,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_metering_outlet_temperature(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_metering_outlet_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_outlet_temperature(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_outlet_temperature)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_OUTLET_TEMPERATURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_outlet_temperature,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_metering_unitof_measure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_unitof_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_unitof_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_unitof_measure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_UNITOF_MEASURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_unitof_measure,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_metering_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_multiplier,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_metering_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_metering_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_divisor,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_metering_summation_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_summation_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_summation_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_summation_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_SUMMATION_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_summation_formatting,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_demand_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_demand_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_demand_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_demand_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_DEMAND_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_demand_formatting,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_historical_consumption_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_historical_consumption_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_historical_consumption_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_historical_consumption_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_HISTORICAL_CONSUMPTION_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_historical_consumption_formatting,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_metering_device_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_metering_device_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_metering_device_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_metering_device_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_METERING_DEVICE_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_metering_device_type,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_energy_carrier_unit_of_measure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_energy_carrier_unit_of_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_unit_of_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_unit_of_measure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_UNIT_OF_MEASURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_unit_of_measure,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_energy_carrier_summation_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_energy_carrier_summation_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_summation_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_summation_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_SUMMATION_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_summation_formatting,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_energy_carrier_demand_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_energy_carrier_demand_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_energy_carrier_demand_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_energy_carrier_demand_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_ENERGY_CARRIER_DEMAND_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_energy_carrier_demand_formatting,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_temperature_unit_of_measure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_temperature_unit_of_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_temperature_unit_of_measure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_unit_of_measure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_UNIT_OF_MEASURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_unit_of_measure,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_metering_temperature_formatting(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_metering_temperature_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_metering_temperature_formatting(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_temperature_formatting)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_METERING_TEMPERATURE_FORMATTING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_temperature_formatting,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ElectricalMeasurement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_electrical_measurement_measurement_type(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_electrical_measurement_measurement_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measurement_type(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_measurement_type)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASUREMENT_TYPE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measurement_type,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_min,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_max,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_current_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_min,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_current_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_max,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_power_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_power_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_min,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_power_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_power_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_power_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_max,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_voltage_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_voltage_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_voltage_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_current_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_current_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_power_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_power_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_dc_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_dc_power_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_POWER_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_power_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_frequency(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_frequency_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_min,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_frequency_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_max,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_neutral_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_neutral_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_neutral_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neutral_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_NEUTRAL_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neutral_current,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_total_active_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int32_t dotdot_get_electrical_measurement_total_active_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_active_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_active_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_ACTIVE_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_active_power,
                                                  sizeof(int32_t));
}

bool dotdot_is_supported_electrical_measurement_total_reactive_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int32_t dotdot_get_electrical_measurement_total_reactive_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_reactive_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int32_t new_total_reactive_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_REACTIVE_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_reactive_power,
                                                  sizeof(int32_t));
}

bool dotdot_is_supported_electrical_measurement_total_apparent_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_electrical_measurement_total_apparent_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_total_apparent_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_total_apparent_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_TOTAL_APPARENT_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_total_apparent_power,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_electrical_measurement_measured1st_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured1st_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured1st_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured1st_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED1ST_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured1st_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured3rd_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured3rd_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured3rd_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured3rd_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED3RD_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured3rd_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured5th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured5th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured5th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured5th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED5TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured5th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured7th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured7th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured7th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured7th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED7TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured7th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured9th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured9th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured9th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured9th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED9TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured9th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured11th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured11th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured11th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured11th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED11TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured11th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase1st_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase1st_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase1st_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase1st_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE1ST_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase1st_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase3rd_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase3rd_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase3rd_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase3rd_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE3RD_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase3rd_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase5th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase5th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase5th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase5th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE5TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase5th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase7th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase7th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase7th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase7th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE7TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase7th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase9th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase9th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase9th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase9th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE9TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase9th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_measured_phase11th_harmonic_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_measured_phase11th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_measured_phase11th_harmonic_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_measured_phase11th_harmonic_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_MEASURED_PHASE11TH_HARMONIC_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_measured_phase11th_harmonic_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_frequency_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_frequency_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_frequency_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_frequency_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_frequency_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_FREQUENCY_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_frequency_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_power_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_electrical_measurement_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_multiplier,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_electrical_measurement_power_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_electrical_measurement_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_power_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_divisor,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_electrical_measurement_harmonic_current_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_electrical_measurement_harmonic_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_harmonic_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_harmonic_current_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_harmonic_current_multiplier,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_electrical_measurement_phase_harmonic_current_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_electrical_measurement_phase_harmonic_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_phase_harmonic_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_phase_harmonic_current_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_PHASE_HARMONIC_CURRENT_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_phase_harmonic_current_multiplier,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_electrical_measurement_line_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_line_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_min(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_max(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_apparent_power(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_apparent_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_power_factor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_electrical_measurement_power_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_voltage_measurement_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_voltage_measurement_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_voltage_measurement_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_voltage_measurement_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_voltage_measurement_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_over_voltage_counter(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_over_voltage_counter(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_over_voltage_counter(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_over_voltage_counter)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_over_voltage_counter,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_under_voltage_counter(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_under_voltage_counter(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_under_voltage_counter(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_under_voltage_counter)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_under_voltage_counter,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_voltage_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_voltage_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_voltage_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_voltage_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_voltage_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_current_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_current_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_current_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_current_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_power_multiplier(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_power_multiplier(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_multiplier)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_MULTIPLIER);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_power_multiplier,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_power_divisor(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_power_divisor(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_power_divisor)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_POWER_DIVISOR);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_power_divisor,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_overload_alarms_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_electrical_measurement_dc_overload_alarms_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_overload_alarms_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_dc_overload_alarms_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_OVERLOAD_ALARMS_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_overload_alarms_mask,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_electrical_measurement_dc_voltage_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_voltage_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_voltage_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_voltage_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_VOLTAGE_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_voltage_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_dc_current_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_dc_current_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_dc_current_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_dc_current_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_DC_CURRENT_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_dc_current_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_alarms_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_ac_alarms_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_alarms_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_ac_alarms_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ALARMS_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_alarms_mask,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_voltage_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_ac_voltage_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_voltage_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_voltage_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_VOLTAGE_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_voltage_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_current_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_ac_current_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_current_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_current_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_CURRENT_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_current_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_active_power_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_ac_active_power_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_active_power_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_active_power_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_ACTIVE_POWER_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_active_power_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_ac_reactive_power_overload(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_ac_reactive_power_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_ac_reactive_power_overload(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_ac_reactive_power_overload)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AC_REACTIVE_POWER_OVERLOAD);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ac_reactive_power_overload,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_over_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_averagerms_over_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_over_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_averagerms_over_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_over_voltage,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_under_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_averagerms_under_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_under_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_averagerms_under_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_under_voltage,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_over_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_extreme_under_voltage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_sag(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_rms_voltage_sag(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_sag)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_swell(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_rms_voltage_swell(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_rms_voltage_swell)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_line_current_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_line_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_current_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_current_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_min_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_max_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_min_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_max_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_power_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power_phb,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_apparent_power_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_apparent_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_power_factor_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_electrical_measurement_power_factor_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor_phb,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_voltage_measurement_period_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_voltage_measurement_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_voltage_measurement_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_voltage_measurement_period_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_voltage_measurement_period_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_over_voltage_counter_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_over_voltage_counter_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_over_voltage_counter_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_over_voltage_counter_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_over_voltage_counter_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_under_voltage_counter_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_under_voltage_counter_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_under_voltage_counter_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_under_voltage_counter_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_under_voltage_counter_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period_phb,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_line_current_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_line_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_line_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_line_current_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_LINE_CURRENT_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_line_current_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_current_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_current_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_CURRENT_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_current_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_current_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_current_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_CURRENT_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_current_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_min_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_min_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MIN_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_min_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_max_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_max_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_MAX_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_max_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_min_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_min_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MIN_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_min_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_current_max_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_current_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_current_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_current_max_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_CURRENT_MAX_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_current_max_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_min_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_min_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_min_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MIN_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_min_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_active_power_max_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_active_power_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_active_power_max_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_active_power_max_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_ACTIVE_POWER_MAX_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_active_power_max_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_reactive_power_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int16_t dotdot_get_electrical_measurement_reactive_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_reactive_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int16_t new_reactive_power_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_REACTIVE_POWER_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reactive_power_phc,
                                                  sizeof(int16_t));
}

bool dotdot_is_supported_electrical_measurement_apparent_power_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_apparent_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_apparent_power_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apparent_power_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_APPARENT_POWER_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apparent_power_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_power_factor_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_electrical_measurement_power_factor_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_power_factor_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_power_factor_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_POWER_FACTOR_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_factor_phc,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_voltage_measurement_period_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_voltage_measurement_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_voltage_measurement_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_voltage_measurement_period_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_VOLTAGE_MEASUREMENT_PERIOD_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_voltage_measurement_period_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_over_voltage_counter_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_over_voltage_counter_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_over_voltage_counter_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_over_voltage_counter_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_OVER_VOLTAGE_COUNTER_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_over_voltage_counter_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_averagerms_under_voltage_counter_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_averagerms_under_voltage_counter_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_averagerms_under_voltage_counter_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagerms_under_voltage_counter_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_AVERAGERMS_UNDER_VOLTAGE_COUNTER_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagerms_under_voltage_counter_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_over_voltage_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_over_voltage_period_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_OVER_VOLTAGE_PERIOD_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_over_voltage_period_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_extreme_under_voltage_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_extreme_under_voltage_period_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_EXTREME_UNDER_VOLTAGE_PERIOD_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_extreme_under_voltage_period_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_sag_period_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_sag_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_sag_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_sag_period_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SAG_PERIOD_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_sag_period_phc,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_electrical_measurement_rms_voltage_swell_period_phc(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_electrical_measurement_rms_voltage_swell_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_electrical_measurement_rms_voltage_swell_period_phc(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_rms_voltage_swell_period_phc)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_ELECTRICAL_MEASUREMENT_RMS_VOLTAGE_SWELL_PERIOD_PHC);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_rms_voltage_swell_period_phc,
                                                  sizeof(uint16_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Diagnostics
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_diagnostics_number_of_resets(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_number_of_resets(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_number_of_resets(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_number_of_resets)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NUMBER_OF_RESETS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_number_of_resets,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_persistent_memory_writes(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_persistent_memory_writes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_persistent_memory_writes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_persistent_memory_writes)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PERSISTENT_MEMORY_WRITES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_persistent_memory_writes,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_mac_rx_bcast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_diagnostics_mac_rx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_rx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_bcast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_BCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_rx_bcast,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_diagnostics_mac_tx_bcast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_diagnostics_mac_tx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_bcast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_BCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_bcast,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_diagnostics_mac_rx_ucast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_diagnostics_mac_rx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_rx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_rx_ucast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_RX_UCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_rx_ucast,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_diagnostics_mac_tx_ucast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_diagnostics_mac_tx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mac_tx_ucast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_diagnostics_mac_tx_ucast_retry(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_mac_tx_ucast_retry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast_retry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_retry)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_RETRY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast_retry,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_mac_tx_ucast_fail(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_mac_tx_ucast_fail(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_mac_tx_ucast_fail(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_mac_tx_ucast_fail)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_MAC_TX_UCAST_FAIL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mac_tx_ucast_fail,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_rx_bcast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_rx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_rx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_bcast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_BCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_rx_bcast,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_tx_bcast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_tx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_bcast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_bcast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_BCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_bcast,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_rx_ucast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_rx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_rx_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_rx_ucast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_RX_UCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_rx_ucast,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_tx_ucast_success(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_success(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_success(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_success)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_SUCCESS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_success,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_tx_ucast_retry(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_retry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_retry(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_retry)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_RETRY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_retry,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_tx_ucast_fail(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_tx_ucast_fail(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_tx_ucast_fail(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_tx_ucast_fail)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_TX_UCAST_FAIL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_tx_ucast_fail,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_route_disc_initiated(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_route_disc_initiated(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_route_disc_initiated(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_route_disc_initiated)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_ROUTE_DISC_INITIATED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_route_disc_initiated,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_neighbor_added(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_neighbor_added(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_added(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_added)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_ADDED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_added,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_neighbor_removed(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_neighbor_removed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_removed(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_removed)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_REMOVED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_removed,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_neighbor_stale(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_neighbor_stale(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_neighbor_stale(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_neighbor_stale)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NEIGHBOR_STALE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_neighbor_stale,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_join_indication(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_join_indication(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_join_indication(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_join_indication)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_JOIN_INDICATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_join_indication,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_child_moved(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_child_moved(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_child_moved(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_child_moved)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_CHILD_MOVED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_child_moved,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_nwkfc_failure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_nwkfc_failure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_nwkfc_failure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwkfc_failure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWKFC_FAILURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_nwkfc_failure,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_apsfc_failure(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_apsfc_failure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_apsfc_failure(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_apsfc_failure)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APSFC_FAILURE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_apsfc_failure,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_unauthorized_key(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_unauthorized_key(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_unauthorized_key(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_unauthorized_key)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_UNAUTHORIZED_KEY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_unauthorized_key,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_nwk_decrypt_failures(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_nwk_decrypt_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_nwk_decrypt_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_nwk_decrypt_failures)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_NWK_DECRYPT_FAILURES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_nwk_decrypt_failures,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_aps_decrypt_failures(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_aps_decrypt_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_aps_decrypt_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_aps_decrypt_failures)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_APS_DECRYPT_FAILURES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aps_decrypt_failures,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_packet_buffer_allocate_failures(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_packet_buffer_allocate_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_packet_buffer_allocate_failures(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_buffer_allocate_failures)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_BUFFER_ALLOCATE_FAILURES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_packet_buffer_allocate_failures,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_relayed_ucast(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_relayed_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_relayed_ucast(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_relayed_ucast)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_RELAYED_UCAST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_relayed_ucast,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_phy_tomac_queue_limit_reached(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TOMAC_QUEUE_LIMIT_REACHED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_phy_tomac_queue_limit_reached(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TOMAC_QUEUE_LIMIT_REACHED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_phy_tomac_queue_limit_reached(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_phy_tomac_queue_limit_reached)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PHY_TOMAC_QUEUE_LIMIT_REACHED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_phy_tomac_queue_limit_reached,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_packet_validate_drop_count(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_packet_validate_drop_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_packet_validate_drop_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_packet_validate_drop_count)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_PACKET_VALIDATE_DROP_COUNT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_packet_validate_drop_count,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_averagemac_retry_peraps_message_sent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGEMAC_RETRY_PERAPS_MESSAGE_SENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint16_t dotdot_get_diagnostics_averagemac_retry_peraps_message_sent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint16_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGEMAC_RETRY_PERAPS_MESSAGE_SENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_averagemac_retry_peraps_message_sent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint16_t new_averagemac_retry_peraps_message_sent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_AVERAGEMAC_RETRY_PERAPS_MESSAGE_SENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_averagemac_retry_peraps_message_sent,
                                                  sizeof(uint16_t));
}

bool dotdot_is_supported_diagnostics_last_messagelqi(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_diagnostics_last_messagelqi(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_last_messagelqi(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_last_messagelqi)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGELQI);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_messagelqi,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_diagnostics_last_messagerssi(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_diagnostics_last_messagerssi(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_diagnostics_last_messagerssi(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_last_messagerssi)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_DIAGNOSTICS_LAST_MESSAGERSSI);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_last_messagerssi,
                                                  sizeof(int8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-RFTelemetry
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_protocol_controller_rf_telemetry_tx_report_enabled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_protocol_controller_rf_telemetry_tx_report_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_rf_telemetry_tx_report_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_tx_report_enabled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_TX_REPORT_ENABLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_tx_report_enabled,
                                                  sizeof(bool));
}

bool dotdot_is_supported_protocol_controller_rf_telemetry_pti_enabled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_protocol_controller_rf_telemetry_pti_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_rf_telemetry_pti_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_pti_enabled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_RF_TELEMETRY_PTI_ENABLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_pti_enabled,
                                                  sizeof(bool));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster State
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_state_endpoint_id_list(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_state_endpoint_id_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_state_endpoint_id_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_endpoint_id_list)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_STATE_ENDPOINT_ID_LIST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_endpoint_id_list,
                                                  sizeof(uint8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster Binding
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_binding_binding_table_full(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_binding_binding_table_full(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_binding_binding_table_full(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_binding_table_full)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE_FULL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_binding_table_full,
                                                  sizeof(bool));
}

bool dotdot_is_supported_binding_bindable_cluster_list(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_binding_bindable_cluster_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_binding_bindable_cluster_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_bindable_cluster_list)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDABLE_CLUSTER_LIST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_bindable_cluster_list,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_binding_binding_table(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

BindingObject dotdot_get_binding_binding_table(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  BindingObject result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_binding_binding_table(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  BindingObject new_binding_table)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_BINDING_BINDING_TABLE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_binding_table,
                                                  sizeof(BindingObject));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster SystemMetrics
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_system_metrics_reporting_interval_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_system_metrics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_reporting_interval_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reporting_interval_seconds,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_system_metrics_cpu_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_cpu_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_cpu_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cpu_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_cpu_frequencym_hz(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_cpu_frequencym_hz(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_frequencym_hz(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_cpu_frequencym_hz)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_FREQUENCYM_HZ);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cpu_frequencym_hz,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_cpu_average_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_cpu_average_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_average_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_cpu_average_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cpu_average_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_cpu_min_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_cpu_min_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_min_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_cpu_min_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MIN_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cpu_min_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_cpu_max_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_cpu_max_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_cpu_max_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_cpu_max_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CPU_MAX_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cpu_max_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_ram_totalmb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_ram_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_ram_totalmb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_TOTALMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_totalmb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_ram_freemb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_ram_freemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_freemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_ram_freemb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_FREEMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_freemb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_ram_availablemb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_ram_availablemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_ram_availablemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_ram_availablemb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_RAM_AVAILABLEMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_ram_availablemb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_swap_memory_totalmb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_swap_memory_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_swap_memory_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_totalmb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_TOTALMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_swap_memory_totalmb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_swap_memory_usedmb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_swap_memory_usedmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_swap_memory_usedmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_swap_memory_usedmb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SWAP_MEMORY_USEDMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_swap_memory_usedmb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_virtual_memory_totalmb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_virtual_memory_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_virtual_memory_totalmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_totalmb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_TOTALMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_virtual_memory_totalmb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_virtual_memory_usedmb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_virtual_memory_usedmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_virtual_memory_usedmb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_virtual_memory_usedmb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_VIRTUAL_MEMORY_USEDMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_virtual_memory_usedmb,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_disks_usage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

DiskUsageData dotdot_get_system_metrics_disks_usage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  DiskUsageData result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_disks_usage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  DiskUsageData new_disks_usage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_USAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_disks_usage,
                                                  sizeof(DiskUsageData));
}

bool dotdot_is_supported_system_metrics_disks_counters(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

DiskIOCounters dotdot_get_system_metrics_disks_counters(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  DiskIOCounters result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_disks_counters(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  DiskIOCounters new_disks_counters)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_DISKS_COUNTERS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_disks_counters,
                                                  sizeof(DiskIOCounters));
}

bool dotdot_is_supported_system_metrics_network_interfaces_data(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

NetworkInterfaceData dotdot_get_system_metrics_network_interfaces_data(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  NetworkInterfaceData result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_network_interfaces_data(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  NetworkInterfaceData new_network_interfaces_data)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_NETWORK_INTERFACES_DATA);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_network_interfaces_data,
                                                  sizeof(NetworkInterfaceData));
}

bool dotdot_is_supported_system_metrics_wireless_network_interfaces_data(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

WirelessNetworkInterfaceData dotdot_get_system_metrics_wireless_network_interfaces_data(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  WirelessNetworkInterfaceData result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_wireless_network_interfaces_data(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  WirelessNetworkInterfaceData new_wireless_network_interfaces_data)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_WIRELESS_NETWORK_INTERFACES_DATA);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_wireless_network_interfaces_data,
                                                  sizeof(WirelessNetworkInterfaceData));
}

bool dotdot_is_supported_system_metrics_hostname(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_system_metrics_hostname(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_hostname(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_HOSTNAME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hostname,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_system_metrics_fqdn(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_system_metrics_fqdn(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_fqdn(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_FQDN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fqdn,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_system_metrics_uptime_minutes(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_system_metrics_uptime_minutes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_uptime_minutes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_UPTIME_MINUTES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_uptime_minutes,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_system_metrics_current_temperature_celcius(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_current_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_current_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_current_temperature_celcius)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_CURRENT_TEMPERATURE_CELCIUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_current_temperature_celcius,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_average_temperature_celcius(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_average_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_average_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_average_temperature_celcius)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_AVERAGE_TEMPERATURE_CELCIUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_average_temperature_celcius,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_min_temperature_celcius(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_min_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_min_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_min_temperature_celcius)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MIN_TEMPERATURE_CELCIUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_min_temperature_celcius,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_max_temperature_celcius(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_max_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_max_temperature_celcius(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_max_temperature_celcius)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_MAX_TEMPERATURE_CELCIUS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_max_temperature_celcius,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_power_plugged(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_system_metrics_power_plugged(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_power_plugged(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_power_plugged)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_POWER_PLUGGED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_power_plugged,
                                                  sizeof(bool));
}

bool dotdot_is_supported_system_metrics_battery_percentage(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_system_metrics_battery_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_battery_percentage(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_battery_percentage)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_BATTERY_PERCENTAGE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_battery_percentage,
                                                  sizeof(double));
}

bool dotdot_is_supported_system_metrics_system_interrupts(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_system_metrics_system_interrupts(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_system_metrics_system_interrupts(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_system_interrupts)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_SYSTEM_METRICS_SYSTEM_INTERRUPTS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_system_interrupts,
                                                  sizeof(uint64_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ApplicationMonitoring
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_application_monitoring_application_name(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_application_monitoring_application_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_application_name)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_NAME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_name,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_application_monitoring_application_version(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_application_monitoring_application_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_version(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_application_version)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_VERSION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_version,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_application_monitoring_application_connected(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_application_monitoring_application_connected(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_connected(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_application_connected)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_CONNECTED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_connected,
                                                  sizeof(bool));
}

bool dotdot_is_supported_application_monitoring_applicationmqtt_topics(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONMQTT_TOPICS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_application_monitoring_applicationmqtt_topics(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONMQTT_TOPICS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationmqtt_topics(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_applicationmqtt_topics)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONMQTT_TOPICS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationmqtt_topics,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_application_monitoring_uptime_minutes(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_application_monitoring_uptime_minutes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_uptime_minutes(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_uptime_minutes)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_UPTIME_MINUTES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_uptime_minutes,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_application_monitoring_process_id(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_application_monitoring_process_id(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_process_id(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_process_id)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_PROCESS_ID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_process_id,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_application_monitoring_hostname(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_application_monitoring_hostname(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_hostname(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_hostname)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_HOSTNAME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_hostname,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_application_monitoring_fqdn(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_application_monitoring_fqdn(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_fqdn(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_fqdn)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_FQDN);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_fqdn,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_application_monitoring_mqtt_logging_enabled(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_application_monitoring_mqtt_logging_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_logging_enabled(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_mqtt_logging_enabled)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_ENABLED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_logging_enabled,
                                                  sizeof(bool));
}

bool dotdot_is_supported_application_monitoring_mqtt_logging_level(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

LoggingLevelEnum dotdot_get_application_monitoring_mqtt_logging_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  LoggingLevelEnum result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_logging_level(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  LoggingLevelEnum new_mqtt_logging_level)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_LOGGING_LEVEL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_logging_level,
                                                  sizeof(LoggingLevelEnum));
}

bool dotdot_is_supported_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_statistics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_mqtt_statistics_reporting_interval_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_statistics_reporting_interval_seconds,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_application_monitoring_mqtt_messages_sent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_application_monitoring_mqtt_messages_sent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_messages_sent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_sent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_SENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_messages_sent,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_application_monitoring_mqtt_messages_received(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_application_monitoring_mqtt_messages_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_messages_received(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_messages_received)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MESSAGES_RECEIVED);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_messages_received,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_application_monitoring_mqtt_subscription_count(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint64_t dotdot_get_application_monitoring_mqtt_subscription_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint64_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_subscription_count(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint64_t new_mqtt_subscription_count)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_SUBSCRIPTION_COUNT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_subscription_count,
                                                  sizeof(uint64_t));
}

bool dotdot_is_supported_application_monitoring_mqtt_average_delivery_time_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_mqtt_average_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_average_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_average_delivery_time_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_AVERAGE_DELIVERY_TIME_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_average_delivery_time_seconds,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_mqtt_min_delivery_time_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_mqtt_min_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_min_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_min_delivery_time_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MIN_DELIVERY_TIME_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_min_delivery_time_seconds,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_mqtt_max_delivery_time_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_mqtt_max_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_mqtt_max_delivery_time_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_mqtt_max_delivery_time_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_MQTT_MAX_DELIVERY_TIME_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_mqtt_max_delivery_time_seconds,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_application_statistics_reporting_interval_seconds(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint32_t dotdot_get_application_monitoring_application_statistics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint32_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_application_statistics_reporting_interval_seconds(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint32_t new_application_statistics_reporting_interval_seconds)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATION_STATISTICS_REPORTING_INTERVAL_SECONDS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_application_statistics_reporting_interval_seconds,
                                                  sizeof(uint32_t));
}

bool dotdot_is_supported_application_monitoring_applicationcpu_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_applicationcpu_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationcpu_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_applicationcpu_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationcpu_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_applicationcpu_average_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_AVERAGE_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_applicationcpu_average_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_AVERAGE_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationcpu_average_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_applicationcpu_average_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_AVERAGE_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationcpu_average_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_applicationcpu_min_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MIN_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_applicationcpu_min_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MIN_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationcpu_min_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_applicationcpu_min_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MIN_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationcpu_min_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_applicationcpu_max_usage_percent(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MAX_USAGE_PERCENT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_applicationcpu_max_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MAX_USAGE_PERCENT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationcpu_max_usage_percent(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_applicationcpu_max_usage_percent)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONCPU_MAX_USAGE_PERCENT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationcpu_max_usage_percent,
                                                  sizeof(double));
}

bool dotdot_is_supported_application_monitoring_applicationram_usagemb(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONRAM_USAGEMB);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_application_monitoring_applicationram_usagemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONRAM_USAGEMB);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_application_monitoring_applicationram_usagemb(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_applicationram_usagemb)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_APPLICATION_MONITORING_APPLICATIONRAM_USAGEMB);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_applicationram_usagemb,
                                                  sizeof(double));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster NameAndLocation
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_name_and_location_name(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_name_and_location_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_name_and_location_name(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_name)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_NAME);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_name,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_name_and_location_location(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_name_and_location_location(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_name_and_location_location(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_location)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_NAME_AND_LOCATION_LOCATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_location,
                                                  sizeof(const char*));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ConfigurationParameters
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_configuration_parameters_configuration_parameters(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

ConfigurationParameter dotdot_get_configuration_parameters_configuration_parameters(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  ConfigurationParameter result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_configuration_parameters_configuration_parameters(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  ConfigurationParameter new_configuration_parameters)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_CONFIGURATION_PARAMETERS_CONFIGURATION_PARAMETERS);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_configuration_parameters,
                                                  sizeof(ConfigurationParameter));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXLocator
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_aox_locator_reporting_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_aox_locator_reporting_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_reporting_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_reporting_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_REPORTING_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_reporting_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_aox_locator_position_and_orientation_valid(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_aox_locator_position_and_orientation_valid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_position_and_orientation_valid(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_position_and_orientation_valid)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION_VALID);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_position_and_orientation_valid,
                                                  sizeof(bool));
}

bool dotdot_is_supported_aox_locator_position_and_orientation(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

CoordinateAndOrientation dotdot_get_aox_locator_position_and_orientation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  CoordinateAndOrientation result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_position_and_orientation(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  CoordinateAndOrientation new_position_and_orientation)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_POSITION_AND_ORIENTATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_position_and_orientation,
                                                  sizeof(CoordinateAndOrientation));
}

bool dotdot_is_supported_aox_locator_azimuth_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

MinMaxPair dotdot_get_aox_locator_azimuth_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  MinMaxPair result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_azimuth_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  MinMaxPair new_azimuth_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AZIMUTH_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_azimuth_mask,
                                                  sizeof(MinMaxPair));
}

bool dotdot_is_supported_aox_locator_elevation_mask(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

MinMaxPair dotdot_get_aox_locator_elevation_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  MinMaxPair result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_elevation_mask(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  MinMaxPair new_elevation_mask)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ELEVATION_MASK);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_elevation_mask,
                                                  sizeof(MinMaxPair));
}

bool dotdot_is_supported_aox_locator_allow_list(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

const char* dotdot_get_aox_locator_allow_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  const char* result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_allow_list(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  const char* new_allow_list)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ALLOW_LIST);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_allow_list,
                                                  sizeof(const char*));
}

bool dotdot_is_supported_aox_locator_aox_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_aox_locator_aox_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_aox_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_aox_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_AOX_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_aox_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_aox_locator_antenna_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_aox_locator_antenna_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_antenna_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_antenna_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_antenna_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_aox_locator_antenna_array(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_antenna_array(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_antenna_array(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_antenna_array)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANTENNA_ARRAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_antenna_array,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_period_samples(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_period_samples(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_period_samples(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_period_samples)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_PERIOD_SAMPLES);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_period_samples,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_angle_filtering(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

bool dotdot_get_aox_locator_angle_filtering(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  bool result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_filtering(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  bool new_angle_filtering)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_filtering,
                                                  sizeof(bool));
}

bool dotdot_is_supported_aox_locator_angle_filtering_weight(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

double dotdot_get_aox_locator_angle_filtering_weight(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  double result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_filtering_weight(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  double new_angle_filtering_weight)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_FILTERING_WEIGHT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_filtering_weight,
                                                  sizeof(double));
}

bool dotdot_is_supported_aox_locator_angle_correction_timeout(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_angle_correction_timeout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_correction_timeout(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_timeout)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_TIMEOUT);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_correction_timeout,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_angle_correction_delay(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_angle_correction_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_angle_correction_delay(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_angle_correction_delay)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_ANGLE_CORRECTION_DELAY);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_angle_correction_delay,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_cte_mode(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

uint8_t dotdot_get_aox_locator_cte_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  uint8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_mode(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  uint8_t new_cte_mode)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_MODE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_mode,
                                                  sizeof(uint8_t));
}

bool dotdot_is_supported_aox_locator_cte_sampling_interval(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_cte_sampling_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_sampling_interval(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_sampling_interval)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_SAMPLING_INTERVAL);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_sampling_interval,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_cte_length(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_cte_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_cte_length(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_cte_length)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_CTE_LENGTH);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_cte_length,
                                                  sizeof(int8_t));
}

bool dotdot_is_supported_aox_locator_slot_duration(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

int8_t dotdot_get_aox_locator_slot_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  int8_t result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_locator_slot_duration(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  int8_t new_slot_duration)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_LOCATOR_SLOT_DURATION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_slot_duration,
                                                  sizeof(int8_t));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster AoXPositionEstimation
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_aox_position_estimation_position(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

EstimatedPosition dotdot_get_aox_position_estimation_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  EstimatedPosition result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_aox_position_estimation_position(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  EstimatedPosition new_position)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_AOX_POSITION_ESTIMATION_POSITION);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_position,
                                                  sizeof(EstimatedPosition));
}

////////////////////////////////////////////////////////////////////////////////
// Start of cluster ProtocolController-NetworkManagement
////////////////////////////////////////////////////////////////////////////////
bool dotdot_is_supported_protocol_controller_network_management_network_management_state(
  const unid_t unid, const zwave_endpoint_id_t endpoint)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  return (node != ATTRIBUTE_STORE_INVALID_NODE);
}

NetworkManagementState dotdot_get_protocol_controller_network_management_network_management_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state)
{
  NetworkManagementState result = {};
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);
  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  attribute_store_read_value(node,
                             value_state,
                             (uint8_t *)&result,
                             sizeof(result));
  return result;
}

sl_status_t dotdot_set_protocol_controller_network_management_network_management_state(
  const unid_t unid,
  const zwave_endpoint_id_t endpoint,
  attribute_store_node_value_state_t value_state,
  NetworkManagementState new_network_management_state)
{
  attribute_store_node_t endpoint_node
    = attribute_store_network_helper_get_endpoint_node(unid, endpoint);

  attribute_store_node_t node
    = attribute_store_get_first_child_by_type(
      endpoint_node,
      DOTDOT_ATTRIBUTE_ID_PROTOCOL_CONTROLLER_NETWORK_MANAGEMENT_NETWORK_MANAGEMENT_STATE);
  return attribute_store_set_node_attribute_value(node,
                                                  value_state,
                                                  (uint8_t *)&new_network_management_state,
                                                  sizeof(NetworkManagementState));
}


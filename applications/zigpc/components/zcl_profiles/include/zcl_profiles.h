/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file zcl_profiles.h
 * @defgroup zcl_profiles ZigPC ZCL Profiles
 * @ingroup zigpc_components
 * @brief The role of the ZigPC ZCL profiles component is to contain the
 * definitions and procedures to help translate ZCL Cluster information
 * recevied from Unify and from the Zigbee network.
 *
 * @{
 */

#ifndef ZCL_PROFILES_H
#define ZCL_PROFILES_H

#include "zigpc_common_zigbee.h"
#include "hash_map.h"

#define MAX_PROFILES 1024

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Conainer for storing ZCL cluster to MQTT topic mappings.
 *
 */
typedef struct {
  const char *cluster_name;
  const char *topic;
} zigpc_zcl_profiles_topic_t;

/**
 * @brief Container for storing ZCL command information to be used
 * by MQTT facing components to parse known command fields.
 *
 */
typedef struct {
  zcl_command_field_t field;
  const char *name;
  const char *format;
} zigpc_zcl_profiles_command_field_t;

/**
 * @brief Populate the Command Hash map using autogenerated definitions
 *
 * @param map Destination hash map commands are inserted into
 * @return SL_STATUS_OK on successful command population
 */
sl_status_t zigpc_zcl_profiles_populate_command_map(hash_map_t *map);

/**
  * @brief Retrieve a list of command topics autogenered. The end of the this
 * list is marked by an item's cluster_name field being "\0".
  *
  * @return zcl_profile_topic_t*
  */
const zigpc_zcl_profiles_topic_t *zigpc_zcl_profiles_get_command_topics(void);

/**
 * @brief Parse the Unify message payload to extract command fields that is
 * associated with a ZCL command. The Unify message should contain all the
 * mandatory fields associated with a ZCL cluster command.
 *
 * @param payload       Character array of Unify message.
 * @param payload_size  Size of Unify message.
 * @param command       Reference struture of the ZCL command to help parse the payload.
 * @param field_data    ZCL Frame reference to populate data from the Unify message.
 * @return sl_status_t SL_STATUS_OK if command fields were successfully parsed.
 * error if not.
 */
sl_status_t zigpc_zcl_profiles_extract_command_fields(const char *payload,
                                                      size_t payload_size,
                                                      zcl_command_t *command,
                                                      zcl_frame_t *field_data);

/**
 * @brief Return the underlying C data type for ZCL enum types.
 * This function will look through a map of autogenerated ZCL enum type names
 * and return the underlying data type that can be recognized (ex. uint8_t)
 *
 * @param format_string
 * @return char* Underlying data type in string form on success. NULL if
 * arguments are empty, "unknown" if the passed in type is not found.
 */
char *zigpc_zcl_profiles_get_enum_underlying_type(const char *format_string);

/**
 * @brief Populate the given array with supported command names based on the
 * cluster name passed in. If the cluster name passed in is not supported,
 * nothing will be populated.
 *
 * @param cluster_name        Cluster name character array.
 * @param dest_command_list   Destination list of char array references.
 * @param dest_command_count  Capacity of destination array passed in.
 * @param commands_populated  Pointer to location to store count of commands
 *                            populated.
 * @return sl_status_t        SL_STATUS_OK on successful population of
 * destination list, SL_STATUS_NULL_POINTER if invalid pointers are sent,
 * SL_STATUS_EMPTY if the cluster name or the destination list has zero
 * capacity, or SL_STATUS_WOULD_OVERFLOW if the destination list has
 * insufficient size.
 */
sl_status_t zigpc_zcl_profiles_populate_supported_command_list(
  const char *cluster_name,
  const char **dest_command_list,
  size_t dest_command_count,
  size_t *commands_populated);

#ifdef __cplusplus
}
#endif

#endif  // ZCL_PROFILES_H

/** @} end zcl_profiles */

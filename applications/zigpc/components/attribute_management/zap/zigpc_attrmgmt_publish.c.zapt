/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}

#include <string.h>
#include <stdio.h>

// UIC shared components
#include "sl_log.h"
#include "dotdot_mqtt.h"

// ZigPC components
#include "zigpc_common_zigbee.h"
#include "zigpc_common_ucl.h"
#include "zigpc_common_unid.h"
#include "zcl_definitions.h"
#include "attribute_management_int.h"


#define {{asSnakeCaseUpper (component_zigpc_attrmgmt_prefix)}}_UNID_EP_TOPIC_LEN 64

static const char LOG_TAG[] = "{{component_zigpc_attrmgmt_prefix}}";

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
sl_status_t {{component_zigpc_attrmgmt_prefix}}_{{asSnakeCaseLower label}}_publish(const char* unid_ep_topic, const zcl_attribute_id_t attr_id, const uint8_t *attr_value)
{
  sl_status_t status = SL_STATUS_OK;

  // NOTE: Only server cluster attributes are supported to be published
  switch(attr_id) {
{{#zcl_attributes_server}}
    case {{asZigPCZclAttributeType parent this}}:
      {
{{#if (isString type)}}
        // NOTE: the first byte is the string length
        uint8_t value_strlen = *attr_value;
        char value[value_strlen + 1];
        memcpy(value, attr_value + 1, sizeof(char) * value_strlen);
        value[value_strlen] = '\0';
{{else}}
        {{asUnderlyingType type}} value;
        memcpy(&value, attr_value, sizeof({{asUnderlyingType type}}));
{{/if}}
        status = {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(unid_ep_topic, value, UCL_MQTT_PUBLISH_TYPE_REPORTED);
      }
      break;
{{/zcl_attributes_server}}
    case ZIGPC_ZCL_GLOBAL_ATTR_CLUSTER_REVISION:
      {
        uint16_t value;
        memcpy(&value, attr_value, sizeof(uint16_t));
        if (value > {{revision}}) {
          value = {{revision}}; // take min of: device-reported vs. dotdot-spec-based
        }
        {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower label}}_publish_cluster_revision(unid_ep_topic, value);
      }
      break;
    default:
      status = SL_STATUS_NOT_FOUND;
      break;
  }

  return status;
}
{{/if}}
{{/zcl_clusters}}

sl_status_t {{component_zigpc_attrmgmt_prefix}}_publish_reported(const zigbee_eui64_t eui64, const zigbee_endpoint_id_t endpoint_id, const zcl_cluster_id_t cluster_id, const zcl_attribute_id_t attr_id, const uint8_t *attr_value)
{
  sl_status_t status = SL_STATUS_OK;
  static char unid_ep_topic[{{asSnakeCaseUpper (component_zigpc_attrmgmt_prefix)}}_UNID_EP_TOPIC_LEN];
  size_t unid_len = ZIGBEE_EUI64_HEX_STR_LENGTH + strlen(ZIGPC_UNID_PREFIX);
  char unid[unid_len];

  status = zigpc_common_eui64_to_unid(eui64, unid, unid_len);

  if (status == SL_STATUS_OK) {
    snprintf(unid_ep_topic,
             {{asSnakeCaseUpper (component_zigpc_attrmgmt_prefix)}}_UNID_EP_TOPIC_LEN,
             UCL_TOPIC_FMTSTR_BY_UNID_EP,
             unid,
             endpoint_id
    );
    switch(cluster_id) {
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
      case {{asZigPCZclClusterType this}}:
        status = {{component_zigpc_attrmgmt_prefix}}_{{asSnakeCaseLower label}}_publish(unid_ep_topic, attr_id, attr_value);
        break;
{{/if}}
{{/zcl_clusters}}
      default:
        status = SL_STATUS_NOT_FOUND;
        break;
    }
  }

  sl_log_debug(LOG_TAG, "Reported cluster[0x%04X]:attribute[0x%04X] value publish status: 0x%X",
               cluster_id, attr_id, status);

  return status;
}

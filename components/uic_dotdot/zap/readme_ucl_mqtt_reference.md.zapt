# Unify Cluster Language MQTT Reference

> NOTE: This document has been autogenerated based on an extended DotDot specification.

This document outlines the JSON definitions for UCL cluster commands and
attributes.

Some data types are structs, enums, and bitmaps. See the UCL Stucts, Enums and Bitmaps
sections at the end of the document to see these definitions.

> NOTE: Unify Protocol Controller and IoT Service support may vary.

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
<br><br><br>


<!-- -->
<!-- -->
<!-- NEW Page Cluster Support -->
<!-- -->
<!-- -->
\page {{asSnakeCaseLower label}} {{asPublicationName label}} Cluster
The following commands and attributes are accepted as JSON payloads for the
{{label}} cluster.

<br><br>

<!-- -->
<!--  START OF {{label}} Attributes Section -->
<!-- -->
\section {{asSnakeCaseLower label}}_attrs {{asPublicationName label}} Attributes
The following attribute topics are used to retrieve the {{label}} cluster state.

<br>

{{#zcl_attributes}}
\subsection {{asSnakeCaseLower parent.label}}_attr_{{asSnakeCaseLower label}} {{parent.label}}/{{label}} Attribute

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName parent.label}}/Attributes/{{label}}/Reported
[PREFIX]/{{asPublicationName parent.label}}/Attributes/{{label}}/Desired
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName parent.label}} Cluster {{label}} Attribute Properties",
  "type": "object",
  "properties": {
    "value": {
{{#if (isMonotonousArray label)}}
      "type": "array",
      "items": {
        "type": "{{asJSONType type label parent.label}}"
      }
{{else}}
      "type": "{{asJSONType type label parent.label}}"
{{/if}}
    }
  },
  "required": [
    "value"
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To see desired/reported value for {{label}} attribute under the by-unid topic space:

```
mosquitto_sub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName parent.label}}/Attributes/{{label}}/+'
# Example output
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName parent.label}}/Attributes/{{label}}/Desired { "value": <DESIRED_{{asSnakeCaseUpper label}}> }
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName parent.label}}/Attributes/{{label}}/Reported { "value": <REPORTED_{{asSnakeCaseUpper label}}> }
```

<br><br>

{{/zcl_attributes}}

\subsection {{asSnakeCaseLower label}}_attr_cluster_revision {{asPublicationName label}}/ClusterRevision Attribute

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName label}}/Attributes/ClusterRevision/Reported
[PREFIX]/{{asPublicationName label}}/Attributes/ClusterRevision/Desired
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName label}} Cluster ClusterRevision Attribute Properties",
  "type": "object",
  "properties": {
    "value": {
      "type": "integer"
    }
  },
  "required": [
    "value"
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To see desired/reported value for ClusterRevision attribute under the by-unid topic space:

```
mosquitto_sub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Attributes/ClusterRevision/+'
# Example output
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Attributes/ClusterRevision/Desired { "value": <DESIRED_CLUSTER_REVISION> }
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Attributes/ClusterRevision/Reported { "value": <REPORTED_CLUSTER_REVISION> }
```

<!-- -->
<!--  END OF {{label}} Attributes Section -->
<!-- -->

<br><br>

<!-- -->
<!-- START OF {{label}} Supported Commands Section -->
<!-- -->
\section {{asSnakeCaseLower label}}_recv_cmd_support {{asPublicationName label}} Command Support

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName label}}/SupportedCommands
[PREFIX]/{{asPublicationName label}}/SupportedGeneratedCommands
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName label}} Command Support Properties",
  "type": "object",
  "properties": {
      "value": {
          "type": "array",
          "items" : {
            "type": "string",
            "enum": [
{{#zcl_commands}}
              "{{label}}",
{{#last}}
              "WriteAttributes",
              "ForceReadAttributes"
{{/last}}
{{/zcl_commands}}
            ]
          }
        }
      }
  },
  "required": [
    "value"
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To see supported commands for {{label}} cluster under the by-unid topic space:

```
mosquitto_sub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints label)}}/<EP>{{/unless}}/{{asPublicationName label}}/SupportedCommands'
# Example output
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints label)}}/<EP>{{/unless}}/{{asPublicationName label}}/SupportedCommands { "value": [{{#zcl_commands}}{{#if (isEqual source "server")}}"{{label}}",{{#last}}"WriteAttributes", "ForceReadAttributes"{{/last}}{{/if}}{{/zcl_commands}}] }
```

To see supported generated commands for {{label}} cluster under the by-unid topic space:

```

mosquitto_sub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints label)}}/<EP>{{/unless}}/{{asPublicationName label}}/SupportedGeneratedCommands'
# Example output
ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints label)}}/<EP>{{/unless}}/{{asPublicationName label}}/SupportedGeneratedCommands { "value": [{{#zcl_commands}}{{#if (isEqual source "client")}}"{{label}}"{{listComma this}}{{/if}}{{/zcl_commands}}] }
```

<!-- -->
<!-- END OF {{label}} Supported Commands Section -->
<!-- -->

<br><br>

<!-- -->
<!-- START OF {{label}} Commands Section -->
<!-- -->
\section {{asSnakeCaseLower label}}_cmds {{asPublicationName label}} Commands

<br><br>

{{#zcl_commands}}
\subsection {{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_cmd {{asPublicationName parent.label}}/{{label}} Command

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName parent.label}}/Commands/{{label}}
[PREFIX]/{{asPublicationName parent.label}}/GeneratedCommands/{{label}}
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName parent.label}} Cluster {{label}} Command Properties",
  "type": "object",
  "properties": {
{{#zcl_command_arguments}}
    "{{label}}": {
    {{#if isArray}}
      "type": "array",
      "items": {
        "type": "{{asJSONType type label parent.label}}"
      }
    {{else}}
      "type": "{{asJSONType type label parent.label}}"
    }{{/if}}{{listComma this}}
{{/zcl_command_arguments}}
  },
  "required": [
{{#zcl_command_arguments}}
    "{{label}}"{{listComma this}}
{{/zcl_command_arguments}}
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To send a {{asPublicationName parent.label}}/{{label}} command under the by-unid topic space:

```
mosquitto_pub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName parent.label}}/Commands/{{label}}' -m  '{ {{#zcl_command_arguments}}"{{label}}": <{{asSnakeCaseUpper label}}_VALUE>{{listComma this}}{{/zcl_command_arguments}} }'
```

To receive a {{asPublicationName parent.label}}/{{label}} generated command from a UNID/endpoint:

```
mosquitto_sub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName parent.label}}/GeneratedCommands/{{label}}'
```

<br><br>

{{/zcl_commands}}
\subsection {{asSnakeCaseLower label}}_write_attr_cmd {{asPublicationName label}}/WriteAttributes Command

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName label}}/Commands/WriteAttributes
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName label}} Cluster WriteAttributes Command Properties",
  "type": "object",
  "properties": {
{{#zcl_attributes}}
{{#if isWritable }}
    "{{label}}": {
{{#if isMonotonousArray}}
      "type": "array",
      "items": {
        "type": "{{asJSONType type label parent.label}}"
      }
{{else}}
      "type": "{{asJSONType type label parent.label}}"
{{/if}}
    }{{listComma this}}
{{/if}}
{{/zcl_attributes}}
  },
  "required": [
    "value"
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To update all {{asPublicationName label}} attributes under the by-unid topic space:

```
mosquitto_pub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Commands/WriteAttributes' -m  '{ {{#zcl_attributes}}{{#if isWritable }}"{{label}}": <{{asSnakeCaseUpper label}}_VALUE> {{listComma this}}{{/if}}{{/zcl_attributes}} }'
```

> NOTE: Attribute values can be written one at a time as well by only including the desired JSON key to update.

<br><br>

\subsection {{asSnakeCaseLower label}}_force_read_attr_cmd {{asPublicationName label}}/ForceReadAttributes Command

**MQTT Topic Pattern:**

```
[PREFIX]/{{asPublicationName label}}/Commands/ForceReadAttributes
```

**MQTT Payload JSON Schema:**

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{asPublicationName label}} Cluster ForceReadAttributes Command Properties",
  "type": "object",
  "properties": {
    "value": {
      "type": "array"
      "items": {
        "type": "string",
        "enum": [
{{#zcl_attributes}}
          "{{label}}"{{listComma this}}
{{/zcl_attributes}}
        ]
      }
    }
  },
  "required": [
    "value"
  ]
}
```

**Example Mosquitto CLI Tool Usage**

To force read all {{asPublicationName label}} attributes under the by-unid topic space (by sending an empty array):

```
mosquitto_pub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Commands/ForceReadAttributes' -m  '{ "value": [] }'
```

To force read one of the {{asPublicationName label}} attributes under the by-unid topic space:

```
mosquitto_pub -t 'ucl/by-unid/<UNID>{{#unless (clusterWithoutEndpoints parent.label)}}/<EP>{{/unless}}/{{asPublicationName label}}/Commands/ForceReadAttributes' -m  '{ "value": [{{#zcl_attributes}}{{#first}}"{{label}}"{{/first}}{{/zcl_attributes}}] }'
```

<!-- -->
<!-- END OF {{label}} Commands Section -->
<!-- -->

{{/if}}
{{/zcl_clusters}}

<br><br><br>

<!-- -->
<!-- -->
<!-- NEW Page UCL Structs -->
<!-- -->
<!-- -->
\page ucl_structs UCL Structs

> NOTE: Not all struct types are used

<br><br>

{{#zcl_structs}}
{{#if (isStruct label)}}
<!-- -->
<!-- START OF Struct {{asType label}} Section -->
<!-- -->
\section struct_{{asSnakeCaseLower (asType label)}} {{asType label}} Struct

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{label}} Struct Properties",
  "type": "object",
  "properties": {
{{#zcl_struct_items}}
    "{{asSymbol label}}": {
      "type": "{{asJSONType type label ""}}"
    }
{{/zcl_struct_items}}
  }
}
```

<!-- -->
<!-- END OF Struct {{asType label}} Section -->
<!-- -->

<br><br>

{{/if}}
{{/zcl_structs}}

<br><br><br>

<!-- -->
<!-- -->
<!-- NEW Page UCL Enums -->
<!-- -->
<!-- -->
\page ucl_enums UCL Enums

> NOTE: Not all enum types are used

<br><br>

{{#zcl_enums}}
<!-- -->
<!-- START OF Enum {{asType label}} Section -->
<!-- -->
\section enum_{{asSnakeCaseLower (asType label)}} {{asType label}} Enum

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{label}} Enum Properties",
  "type": "string",
  "enum": [
{{#zcl_enum_items}}
    "{{label}}"{{listComma this}}
{{/zcl_enum_items}}
  ]
}
```

<!-- -->
<!-- END OF Enum {{asType label}} Section -->
<!-- -->

<br><br>

{{/zcl_enums}}

<br><br><br>

<!-- -->
<!-- -->
<!-- NEW Page UCL Bitmaps -->
<!-- -->
<!-- -->
\page ucl_bitmaps UCL Bitmaps

> NOTE: Not all enum types are used

<br><br>

{{#zcl_bitmaps}}
<!-- -->
<!-- START OF Bitmap {{asType label}} Section -->
<!-- -->
\section enum_{{asSnakeCaseLower (asType label)}} {{asType label}} Bitmap

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "{{label}} Enum Properties",
  "type": "object",
  "properties": {
{{#zcl_bitmap_items}}
    "{{label}}": {
        "type": "boolean"
    }{{listComma this}}
{{/zcl_bitmap_items}}
  }
}
```

<!-- -->
<!-- END OF Bitmap {{asType label}} Section -->
<!-- -->

<br><br>

{{/zcl_bitmaps}}

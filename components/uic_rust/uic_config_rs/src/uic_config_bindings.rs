/* automatically generated by rust-bindgen 0.59.1 */

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum config_status_t {
    CONFIG_STATUS_OK = 0,
    CONFIG_STATUS_NOK = 1,
    CONFIG_STATUS_ERROR = 2,
    CONFIG_STATUS_INVALID_TYPE = 4,
    CONFIG_STATUS_DOES_NOT_EXIST = 8,
}
extern "C" {
    #[doc = " @brief Add string configuration"]
    #[doc = ""]
    #[doc = " @param name Name of the config"]
    #[doc = " @param help Help message (to print to command line)"]
    #[doc = " @param default_value Default value for the configuration"]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_add_string(
        name: *const ::std::os::raw::c_char,
        help: *const ::std::os::raw::c_char,
        default_value: *const ::std::os::raw::c_char,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Add an integer configuration."]
    #[doc = ""]
    #[doc = " @param name Name of the config"]
    #[doc = " @param help Help message (to print to command line)"]
    #[doc = " @param default_value Default value for the configuration"]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_add_int(
        name: *const ::std::os::raw::c_char,
        help: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Add a double configuration."]
    #[doc = ""]
    #[doc = " @param name Name of the config"]
    #[doc = " @param help Help message (to print to command line)"]
    #[doc = " @param default_value Default value for the configuration"]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_add_double(
        name: *const ::std::os::raw::c_char,
        help: *const ::std::os::raw::c_char,
        default_value: f64,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Add a bool configuration."]
    #[doc = ""]
    #[doc = " @param name Name of the config"]
    #[doc = " @param help Help message (to print to command line)"]
    #[doc = " @param default_value Default value for the configuration"]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_add_bool(
        name: *const ::std::os::raw::c_char,
        help: *const ::std::os::raw::c_char,
        default_value: bool,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Parse command line arguments to the config system."]
    #[doc = ""]
    #[doc = " This must be done before calling any of the config_get functions."]
    #[doc = " In addition all config_add calls shall be done before calling this function."]
    #[doc = ""]
    #[doc = " @param argc Argument count"]
    #[doc = " @param argv Arguments as array of (c) strings"]
    #[doc = " @param version Version string to print if \"version\" argument is given"]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_parse(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Get the config as a C-string."]
    #[doc = ""]
    #[doc = " @param name Name of configuration"]
    #[doc = " @param result [out] value read from configuration."]
    #[doc = "                The string is allocated in the config internal data structure,"]
    #[doc = "                that's the reason for it is a const **,"]
    #[doc = "                in addition after calling @ref config_parse (again),"]
    #[doc = "                the string is invalid."]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_get_as_string(
        name: *const ::std::os::raw::c_char,
        result: *mut *const ::std::os::raw::c_char,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Get the config as an integer."]
    #[doc = ""]
    #[doc = " @param name Name of configuration"]
    #[doc = " @param result [out] value read from configuration."]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_get_as_int(
        name: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_int,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Get the config as a double."]
    #[doc = ""]
    #[doc = " @param name Name of configuration"]
    #[doc = " @param result [out] value read from configuration."]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_get_as_double(
        name: *const ::std::os::raw::c_char,
        result: *mut f64,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Get the config as bool."]
    #[doc = ""]
    #[doc = " @param name Name of configuration"]
    #[doc = " @param result [out] value read from configuration."]
    #[doc = " @return config_status_t CONFIG_STATUS_OK if success"]
    pub fn config_get_as_bool(
        name: *const ::std::os::raw::c_char,
        result: *mut bool,
    ) -> config_status_t;
}
extern "C" {
    #[doc = " @brief Reset the config."]
    #[doc = ""]
    #[doc = " This will reset the config, so all added configurations are removed,"]
    #[doc = " as well as all parsed configuration variables."]
    #[doc = " This is used in unit-tests, and there shouldn't be a reason to use it elsewhere"]
    pub fn config_reset();
}

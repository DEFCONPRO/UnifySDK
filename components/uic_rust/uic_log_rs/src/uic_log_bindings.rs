/* automatically generated by rust-bindgen 0.58.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub type sl_status_t = u32;
    #[repr(u32)]
    #[doc = " @brief Log levels"]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub enum sl_log_level {
        SL_LOG_DEBUG = 0,
        SL_LOG_INFO = 1,
        SL_LOG_WARNING = 2,
        SL_LOG_ERROR = 3,
        SL_LOG_CRITICAL = 4,
    } 
    #[doc = " @brief Log levels"]
    pub use self::super::root::sl_log_level as sl_log_level_t;
    extern "C" {# [doc = " @brief Set log level."] # [doc = ""] # [doc = " @param level log level"]
        pub fn sl_log_set_level(level: root::sl_log_level_t);
    }
    extern "C" {
    #[doc = " @brief Set log level for a given tag."]
    #[doc = " This level will override the log level set in \\ref sl_log_set_level"]
    #[doc = " To remove a tag specific log level use \\ref sl_log_unset_tag_level"]
    #[doc = " @param tag tag to set log level for"]
    #[doc = " @param level log level to set for the tag"]
        pub fn sl_log_set_tag_level(
            tag: *const ::std::os::raw::c_char,
            level: root::sl_log_level_t,
        );
    }
    extern "C" {
        #[doc = " @brief Remove tag specific log level for tag."]
        #[doc = " By removing the tag specific log level,"]
        #[doc = " the log level for the tag will use the log level set by \\ref sl_log_set_level"]
        #[doc = " @param tag tag to unset specific log level for"]
        pub fn sl_log_unset_tag_level(tag: *const ::std::os::raw::c_char);
    }
    extern "C" {
        #[doc = " @brief Convert sl_log_level as string to sl_log_level_t."]
        #[doc = " @param level string representation of sl_log_level_t, supported values are:"]
        #[doc = "              \"d\", \"debug\""]
        #[doc = "              \"i\", \"info\""]
        #[doc = "              \"w\", \"warning\""]
        #[doc = "              \"e\", \"error\""]
        #[doc = "              \"c\", \"critical\""]
        #[doc = " @param result"]
        #[doc = " @return sl_status_t"]
        pub fn sl_log_level_from_string(
            level: *const ::std::os::raw::c_char,
            result: *mut root::sl_log_level_t,
        ) -> root::sl_status_t;
    }
    extern "C" {
        #[doc = " @brief Read configuration from config library."]
        pub fn sl_log_read_config();
    }
    extern "C" {
        #[doc = " @brief Write to the log"]
        #[doc = " @param tag Log tag to use"]
        #[doc = " @param level Log level"]
        #[doc = " @param fmtstr Formatted string (printf style)"]
        #[doc = " @param ... arguments for the string"]
        pub fn sl_log(
            tag: *const ::std::os::raw::c_char,
            level: root::sl_log_level_t,
            fmtstr: *const ::std::os::raw::c_char,
            ...
        );
    }
}

initSidebarItems({"enum":[["E_ROUTING_SCHEME","Transport routing scheme state define definitions"],["_E_ROUTING_SCHEME_","Transport routing scheme state define definitions"],["rf_power_level_t","RF power level values used with zwapi_set_rf_power_level() and zwapi_get_rf_power_level()"]],"fn":[["is_zwave_command_class_filtered_for_root_device","@brief function helper function to help Command Classes decide if they should create the supporting node attributes on Command Class version attribute update."],["zwave_command_class_get_endpoint_id_node","@brief Gets the Attribute Store Endpoint ID node for a given Z-Wave NodeID / Endpoint ID in our network"],["zwave_command_class_get_endpoint_node","@brief Find the Z-Wave Endpoint ID Node attribute based on a const zwave_controller::zwave_controller_connection_info_t object"],["zwave_command_class_get_node_id_node","@brief Find the Z-Wave NodeID Node attribute based on a const zwave_controller::zwave_controller_connection_info_t object"],["zwave_command_class_multi_channel_capability_get","@brief Resolves a Non-secure NIF for an Endpoint ID > 0."],["zwave_command_class_multi_channel_handler","@brief Handles incoming Multi Channel encapsulated commands"],["zwave_command_class_multi_channel_init","@brief Initialize the Multi Channel Command Class (handler)"],["zwave_command_class_send_report","@brief function to send report frames with default tx options."],["zwave_command_class_supervision_abort_send_data","@brief Abort a queued or ongoing transmission."],["zwave_command_class_supervision_close_session_by_tx_session","@brief Close a supervision session based on the Z-Wave Tx session ID"],["zwave_command_class_supervision_init","@brief Setup fixture for the Supervision Command Class."],["zwave_command_class_supervision_send_data","@brief Take a frame and create a Supervision Session."],["zwave_command_class_supervision_stop_wake_on_demand","@brief Cancel a request that a node is “Waked” Up on demand at the next communication."],["zwave_command_class_supervision_support_handler","@brief Handle incoming Supervision encapsulated commands."],["zwave_command_class_supervision_wake_on_demand","@brief Request that a node is “Waked” Up on demand at the next communication."],["zwave_command_class_version_init","@brief Intitialize the Version Command Class control APIs"],["zwave_command_classes_init","@brief Setup fixture for @ref command_classes."]],"struct":[["_S_ROUTE_LINK_",""],["rssi_val","RSSI value array used in zwapi_tx_report_t. Each value is an RSSI feedback constant defined above."],["zwapi_tx_report","@brief Detailed report and data about Z-Wave transmissions"],["zwave_controller_connection_info","@brief Structure holding information about the source and destination when transmitting and receiving Z-Wave frames."],["zwave_rx_receive_options_t","@brief Describing receive parameters of a frame."],["zwave_tx_options",""]],"type":[["S_ROUTE_LINK",""],["attribute_store_node_t",""],["datastore_attribute_id_t",""],["on_zwave_tx_send_data_complete_t","@brief Callback function of zwave_tx_send_data(), indicating the result of the operation"],["sl_status_t",""],["zwapi_tx_report_t","@brief Detailed report and data about Z-Wave transmissions"],["zwave_command_class_t",""],["zwave_controller_connection_info_t","@brief Structure holding information about the source and destination when transmitting and receiving Z-Wave frames."],["zwave_endpoint_id_t",""],["zwave_multicast_group_id_t",""],["zwave_node_id_t","Z-Wave NodeID type"],["zwave_node_list_t",""],["zwave_nodemask_t","Node mask"],["zwave_tx_options_t",""],["zwave_tx_session_id_t","@brief Handle that can be used for aborting ongoing transmissions or identifying TX Queue elements."]]});
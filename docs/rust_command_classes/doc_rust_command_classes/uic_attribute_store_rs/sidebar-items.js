initSidebarItems({"constant":[["ATTRIBUTE_STORE_INVALID_NODE",""],["ATTRIBUTE_STORE_MAXIMUM_VALUE_LENGTH",""],["CLOCK_SECOND",""]],"enum":[["AttributeStoreError",""],["attribute_store_change_t","@brief Attribute Store type to indicate the modification type that triggered a callback"],["attribute_store_node_value_state_t","@brief This is the value state of a value."],["attribute_store_node_value_state_t","@brief This is the value state of a value."]],"fn":[["attribute_resolver_register_rule",""],["attribute_store_add_if_missing","@brief Add multiple nodes to a parent if they are not already present."],["attribute_store_add_node","@brief Add a new node in the current attribute store."],["attribute_store_copy_value","@brief Copy the value from a node to another."],["attribute_store_delete_node","@brief Delete a node and all its children from the attribute store."],["attribute_store_get_desired","@brief Reads the desired value of an attribute store node"],["attribute_store_get_first_parent_with_type","@brief Traverse up the tree from a node and finds the first parent with a given type."],["attribute_store_get_node_attribute_value","@brief Get the attribute value of a node."],["attribute_store_get_node_child","@brief Get the node handle of a child of a node."],["attribute_store_get_node_child_by_type","@brief Get the node handle of a child of a node with a certain type."],["attribute_store_get_node_child_by_value","@brief Get the node handle of a child of a node with a certain type and value."],["attribute_store_get_node_child_count","@brief Get the number of children of the given node."],["attribute_store_get_node_parent","@brief Get the node handle of the parent of a node."],["attribute_store_get_node_type","@brief Get the type of a node."],["attribute_store_get_reported","@brief Reads the reported value of an attribute store node"],["attribute_store_get_root","@brief Retrieve the root node of the tree."],["attribute_store_init","@brief Initialize the Attribute store."],["attribute_store_is_value_defined","@brief Indicate whether a value is defined in the attribute store."],["attribute_store_is_value_matched","@brief Indicate whether reported and desired values are matched in the attribute store."],["attribute_store_log","@brief Log the content of the Attribute Store tree using \\ref sl_log."],["attribute_store_log_node","@brief Log the content of the Attribute Store tree using \\ref sl_log from a given node. @param node          The node handle of the node for which the tree will be printed out. @param log_children  bool value indicating if children should be printed out as well."],["attribute_store_name_by_type","@brief Get the type name of an attribute"],["attribute_store_node_exists","@brief Verify whether a node is in the Attribute Store."],["attribute_store_read_value","@brief Read an arbitrary sized value from the attribute store and writes it to a pointer."],["attribute_store_refresh_node_and_children_callbacks","@brief Invoking update of callbacks for the given node and all children nodes"],["attribute_store_register_attribute","@brief Register a name for a attribute typid."],["attribute_store_register_callback","@brief Register a callback function to any node change."],["attribute_store_register_callback_by_type","@brief Register a callback function to any node with a given type."],["attribute_store_register_callback_by_type_and_state","@brief Register a callback function to any node with a given type for a given value_state update"],["attribute_store_set_child_reported","@brief Sets the value of the first child of a node with a given type. and writes its reported value."],["attribute_store_set_desired","@brief Set the Desired value of an Attribute Store node"],["attribute_store_set_desired_as_reported","@brief Set the Desired value to the same as the Reported value."],["attribute_store_set_node_attribute_value","@brief Set the attribute value of a node in the current attribute store tree."],["attribute_store_set_reported","@brief Set the Reported value of an Attribute Store node"],["attribute_store_set_reported_as_desired","@brief Set the Reported value to the same as the Desired value."],["attribute_store_set_reported_string","@brief Safely copies a String in the Attribute Store"],["attribute_store_set_uint32_child_by_type","@brief Set the value of the first child with a given type."],["attribute_store_set_uint8_child_by_type","See @ref attribute_store_set_uint32_child_by_type @param parent Parent node of children @param type   Type of child @param state  The value_state @param value  Value @return sl_status_t"],["attribute_store_teardown","@brief Clears up the Attribute Store from all its content."],["attribute_store_type_by_name","@brief Lookup the type of an attribute by its name"],["attribute_store_undefine_desired","@brief Set the Desired value to “undefined” (0 size no value)"],["attribute_store_undefine_reported","@brief Set the Reported value to “undefined” (0 size no value)"],["attribute_store_walk_tree","@brief Visit all nodes in the tree."],["attribute_timeout_cancel_callback","@brief Cancels a callback to be called after a duration for an attribute."],["attribute_timeout_set_callback","@brief Sets a callback to be called after a duration for an attribute."],["attribute_timeouts_init","@brief Initializes the UIC attribute timeouts component"],["attribute_timeouts_teardown","@brief Teardown the UIC attribute timeouts component @returns 0 on success."]],"mod":[["attribute_store",""]],"type":[["attribute_resolver_function_t","attribute_resolver_callback type"],["attribute_store_node_t",""],["attribute_store_node_update_callback_t","@brief Attribute store callback type for tree node updates"],["attribute_store_type_t",""],["attribute_timeout_callback_t","@brief Function prototype callback functions."],["clock_time_t",""],["datastore_attribute_id_t",""],["size_t",""],["sl_status_t",""]]});